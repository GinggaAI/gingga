- content_for :page_title, t('brands.page_title')

- if @presenter.show_notice?
  = render Ui::ToastComponent.new(message: @presenter.notice_message, variant: :success)

%main.flex-1.overflow-y-auto
  .p-8
    .max-w-6xl.mx-auto
      .mb-8
        %h1.text-3xl.font-bold.text-gray-900.mb-2= t('brands.edit_title')
        %p.text-gray-600= t('brands.edit_subtitle')

      - if @presenter.show_brands_selector?
        .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl.mb-6
          .flex.flex-col.p-6{:class => "space-y-1.5"}
            .font-semibold.tracking-tight.text-xl.flex.items-center.gap-2
              %svg.lucide.lucide-settings.w-5.h-5{:class => "text-[#A37FFF]", :fill => "none", :height => "24", :stroke => "currentColor", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2", :viewbox => "0 0 24 24", :width => "24", :xmlns => "http://www.w3.org/2000/svg"}
                %path{:d => "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"}
                %circle{:cx => "12", :cy => "12", :r => "3"}
              = t('brands.managing_label')
          .p-6.pt-0
            .flex.items-center.gap-4
              %select{:onchange => "if(this.value) window.location.href='/my-brand?brand_id=' + this.value", :class => "flex h-10 w-full bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm rounded-xl border-2 border-gray-200 focus:border-[#FFC940]"}
                - @presenter.brands_collection.each do |brand|
                  %option{:value => brand.id, :selected => ('selected' if brand == @brand)}= brand.name || t('brands.untitled_brand')
              = link_to brand_path, method: :post, data: { turbo_method: :post }, class: "inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-3 rounded-xl" do
                = t('brands.add_new_brand')

      = form_with model: @brand, url: brand_path(brand_id: @brand.id), method: :patch, local: true, data: { turbo_frame: "_top" }, class: "space-y-6" do |form|
        - if @presenter.show_validation_errors?
          .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
            .p-6
              .bg-red-50.border.border-red-200.rounded-xl.p-4
                %h4.text-red-800.font-medium= t('brands.fix_errors')
                %ul.mt-2.text-red-600.text-sm{:class => "space-y-1"}
                  - @presenter.validation_error_messages.each do |message|
                    %li= message

        / Brand Identity Section
        .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
          .flex.flex-col.p-6{:class => "space-y-1.5"}
            .font-semibold.tracking-tight.text-xl.flex.items-center.gap-2
              %svg.lucide.lucide-user.w-5.h-5{:class => "text-[#3AC8FF]", :fill => "none", :height => "24", :stroke => "currentColor", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2", :viewbox => "0 0 24 24", :width => "24", :xmlns => "http://www.w3.org/2000/svg"}
                %path{:d => "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"}
                %circle{:cx => "12", :cy => "7", :r => "4"}
              = t('brands.brand_identity')
            %p.text-sm.text-gray-600= t('brands.brand_identity_desc')
          .p-6.pt-0
            .grid.grid-cols-1.md:grid-cols-2.gap-6
              .space-y-2
                = form.label :name, t('brands.brand_name'), class: "block text-sm font-medium text-theme"
                = form.text_field :name, placeholder: t('brands.brand_name_placeholder'), class: "form-input w-full"
              .space-y-2
                = form.label :slug, t('brands.brand_handle'), class: "block text-sm font-medium text-theme"
                = form.text_field :slug, placeholder: t('brands.brand_handle_placeholder'), class: "form-input w-full"
              .space-y-2
                = form.label :industry, t('brands.industry_label'), class: "block text-sm font-medium text-theme"
                = form.select :industry, options_for_select([[t('brands.select_industry'), ""], ["Technology", "technology"], ["Fashion & Beauty", "fashion"], ["Food & Beverage", "food"], ["Health & Fitness", "health"], ["Education", "education"], ["Entertainment", "entertainment"], ["Business & Finance", "business"], ["Travel & Lifestyle", "travel"], ["Other", "other"]], @brand.industry), {}, { class: "form-input w-full" }
              .space-y-2
                = form.label :voice, t('brands.brand_voice_label'), class: "block text-sm font-medium text-theme"
                = form.select :voice, options_for_select([[t('brands.select_voice'), ""], ["Professional", "professional"], ["Friendly", "friendly"], ["Authoritative", "authoritative"], ["Casual", "casual"], ["Inspirational", "inspirational"], ["Humorous", "humorous"], ["Educational", "educational"]], @brand.voice), {}, { class: "form-input w-full" }

        / Audience & Offer Section
        .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
          .flex.flex-col.p-6{:class => "space-y-1.5"}
            .font-semibold.tracking-tight.text-xl.flex.items-center.gap-2
              %svg.lucide.lucide-target.w-5.h-5{:class => "text-[#FFC940]", :fill => "none", :height => "24", :stroke => "currentColor", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2", :viewbox => "0 0 24 24", :width => "24", :xmlns => "http://www.w3.org/2000/svg"}
                %circle{:cx => "12", :cy => "12", :r => "10"}
                %circle{:cx => "12", :cy => "12", :r => "6"}
                %circle{:cx => "12", :cy => "12", :r => "2"}
              = t('brands.audience_offer')
            %p.text-sm.text-gray-600= t('brands.audience_offer_desc')
          .p-6.pt-0
            .space-y-6
              .space-y-2
                = form.label :value_proposition, t('brands.value_proposition'), class: "block text-sm font-medium text-theme"
                = form.text_area :value_proposition, placeholder: t('brands.value_proposition_placeholder'), rows: 4, class: "form-input w-full"
              .space-y-2
                = form.label :mission, t('brands.mission_purpose'), class: "block text-sm font-medium text-theme"
                = form.text_area :mission, placeholder: t('brands.mission_purpose_placeholder'), rows: 4, class: "form-input w-full"

        / Content Preferences Section
        .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
          .flex.flex-col.p-6{:class => "space-y-1.5"}
            .font-semibold.tracking-tight.text-xl.flex.items-center.gap-2
              %svg.lucide.lucide-settings.w-5.h-5{:class => "text-[#A37FFF]", :fill => "none", :height => "24", :stroke => "currentColor", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2", :viewbox => "0 0 24 24", :width => "24", :xmlns => "http://www.w3.org/2000/svg"}
                %path{:d => "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"}
                %circle{:cx => "12", :cy => "12", :r => "3"}
              = t('brands.content_preferences')
            %p.text-sm.text-gray-600= t('brands.content_preferences_desc')
          .p-6.pt-0
            .grid.grid-cols-1.md:grid-cols-2.gap-6
              .space-y-2
                = form.label :content_language, t('brands.content_language'), class: "block text-sm font-medium text-theme"
                = form.select :content_language, options_for_select([["English", "en"], ["Spanish", "es"], ["French", "fr"], ["German", "de"], ["Italian", "it"], ["Portuguese", "pt"], ["Other", "other"]], @brand.content_language), {}, { class: "form-input w-full" }
              .space-y-2
                = form.label :region, t('brands.primary_region'), class: "block text-sm font-medium text-theme"
                = form.select :region, options_for_select([["North America", "north_america"], ["Europe", "europe"], ["Asia Pacific", "asia_pacific"], ["Latin America", "latin_america"], ["Middle East & Africa", "mea"], ["Global", "global"]], @brand.region), {}, { class: "form-input w-full" }
              .md:col-span-2.space-y-6
                / Content Guidelines Section
                .bg-gray-50.p-4.rounded-lg.border
                  %h4.text-lg.font-semibold.text-theme.mb-4= t('brands.content_guidelines')
                  .space-y-4
                    .space-y-2
                      = form.label :tone_no_go_list, t('brands.tones_to_avoid'), class: "block text-sm font-medium text-theme"
                      = form.text_field :tone_no_go_list, placeholder: t('brands.tones_to_avoid_placeholder'), class: "form-input w-full"
                      %p.text-xs.text-gray-500= t('brands.separate_commas')
                    .space-y-2
                      = form.label :banned_words_list, t('brands.banned_words'), class: "block text-sm font-medium text-theme"
                      = form.text_field :banned_words_list, placeholder: t('brands.banned_words_placeholder'), class: "form-input w-full"
                      %p.text-xs.text-gray-500= t('brands.separate_commas')
                    .space-y-2
                      = form.label :claims_rules_text, t('brands.claims_rules'), class: "block text-sm font-medium text-theme"
                      = form.text_area :claims_rules_text, placeholder: t('brands.claims_rules_placeholder'), rows: 3, class: "form-input w-full"
                / Brand Assets & Resources Section
                .bg-gray-50.p-4.rounded-lg.border
                  %h4.text-lg.font-semibold.text-theme.mb-4= t('brands.brand_assets')
                  .grid.grid-cols-2.gap-4
                    .flex.items-center{:class => "space-x-3"}
                      = form.check_box :kling_enabled, { class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" }
                      = form.label :kling_enabled, "Kling AI Video", class: "text-sm font-medium text-theme"
                    .flex.items-center{:class => "space-x-3"}
                      = form.check_box :stock_enabled, { class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" }
                      = form.label :stock_enabled, "Stock Content", class: "text-sm font-medium text-theme"
                    .flex.items-center{:class => "space-x-3"}
                      = form.check_box :budget_enabled, { class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" }
                      = form.label :budget_enabled, "Budget Available", class: "text-sm font-medium text-theme"
                    .flex.items-center{:class => "space-x-3"}
                      = form.check_box :editing_enabled, { class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" }
                      = form.label :editing_enabled, "Video Editing", class: "text-sm font-medium text-theme"
                    .flex.items-center{:class => "space-x-3"}
                      = form.check_box :ai_avatars_enabled, { class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" }
                      = form.label :ai_avatars_enabled, "AI Avatars", class: "text-sm font-medium text-theme"
                    .flex.items-center{:class => "space-x-3"}
                      = form.check_box :podcast_clips_enabled, { class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" }
                      = form.label :podcast_clips_enabled, "Podcast Clips", class: "text-sm font-medium text-theme"

        / Strategy Readiness Status
        .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
          .p-6
            .flex.items-center.justify-center.p-4.rounded-xl{:class => @presenter.strategy_ready? ? 'bg-green-50 border border-green-200' : 'bg-yellow-50 border border-yellow-200'}
              .flex.items-center
                - if @presenter.strategy_ready?
                  %svg.w-5.h-5.text-green-600.mr-2{:fill => "currentColor", :viewBox => "0 0 20 20"}
                    %path{:d => "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z", "fill-rule" => "evenodd", "clip-rule" => "evenodd"}
                  %span.text-green-800.font-medium= t('brands.strategy_ready')
                - else
                  %svg.w-5.h-5.text-yellow-600.mr-2{:fill => "currentColor", :viewBox => "0 0 20 20"}
                    %path{:d => "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z", "fill-rule" => "evenodd", "clip-rule" => "evenodd"}
                  %span.text-yellow-800= @presenter.strategy_readiness_message

        / Target Audiences Section
        .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
          .flex.flex-col.p-6{:class => "space-y-1.5"}
            .font-semibold.tracking-tight.text-xl.flex.items-center.gap-2
              %svg.lucide.lucide-users.w-5.h-5{:class => "text-[#FFC940]", :fill => "none", :height => "24", :stroke => "currentColor", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2", :viewbox => "0 0 24 24", :width => "24", :xmlns => "http://www.w3.org/2000/svg"}
                %path{:d => "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"}
                %circle{:cx => "9", :cy => "7", :r => "4"}
                %path{:d => "M22 21v-2a4 4 0 0 0-3-3.87"}
                %path{:d => "M16 3.13a4 4 0 0 1 0 7.75"}
              = t('brands.target_audiences')
            %p.text-sm.text-gray-600= t('brands.target_audiences_desc')
          .p-6.pt-0
            #audiences-section
              .mb-4
                - if @presenter.has_audiences?
                  %p.text-sm.text-gray-600.mb-4
                    = t('brands.current_summary')
                    %span.font-medium= @presenter.audience_demographics_summary
                - else
                  %p.text-sm.text-gray-600.mb-4= t('brands.no_audiences')
              #audiences-container
                = form.fields_for :audiences do |audience_form|
                  = render Ui::AudienceFormComponent.new(form: audience_form, audience: audience_form.object, index: audience_form.options[:child_index])
              %button#add-audience-btn.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.text-sm.font-medium.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.border.border-input.bg-background.hover:bg-accent.hover:text-accent-foreground.h-9.px-3.rounded-xl{:type => "button"}
                %svg.w-4.h-4.mr-2{:fill => "none", :stroke => "currentColor", :viewBox => "0 0 24 24"}
                  %path{:d => "M12 6v6m0 0v6m0-6h6m-6 0H6", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2"}
                = t('brands.add_audience')

        / Products & Services Section
        .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
          .flex.flex-col.p-6{:class => "space-y-1.5"}
            .font-semibold.tracking-tight.text-xl.flex.items-center.gap-2
              %svg.lucide.lucide-package.w-5.h-5{:class => "text-[#3AC8FF]", :fill => "none", :height => "24", :stroke => "currentColor", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2", :viewbox => "0 0 24 24", :width => "24", :xmlns => "http://www.w3.org/2000/svg"}
                %path{:d => "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z"}
                %path{:d => "m3.3 7 8.7 5 8.7-5"}
                %path{:d => "M12 22V12"}
              = t('brands.products_services')
            %p.text-sm.text-gray-600= t('brands.products_services_desc')
          .p-6.pt-0
            #products-section
              .mb-4
                - if @presenter.has_products?
                  %p.text-sm.text-gray-600.mb-4
                    = t('brands.current_products')
                    %span.font-medium= @presenter.products_summary
                - else
                  %p.text-sm.text-gray-600.mb-4= t('brands.no_products')
              #products-container
                = form.fields_for :products do |product_form|
                  = render Ui::ProductFormComponent.new(form: product_form, product: product_form.object, index: product_form.options[:child_index])
              %button#add-product-btn.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.text-sm.font-medium.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.border.border-input.bg-background.hover:bg-accent.hover:text-accent-foreground.h-9.px-3.rounded-xl{:type => "button"}
                %svg.w-4.h-4.mr-2{:fill => "none", :stroke => "currentColor", :viewBox => "0 0 24 24"}
                  %path{:d => "M12 6v6m0 0v6m0-6h6m-6 0H6", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2"}
                = t('brands.add_product')

        / Social Media Channels Section
        .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
          .flex.flex-col.p-6{:class => "space-y-1.5"}
            .font-semibold.tracking-tight.text-xl.flex.items-center.gap-2
              %svg.lucide.lucide-share-2.w-5.h-5{:class => "text-[#A37FFF]", :fill => "none", :height => "24", :stroke => "currentColor", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2", :viewbox => "0 0 24 24", :width => "24", :xmlns => "http://www.w3.org/2000/svg"}
                %circle{:cx => "18", :cy => "5", :r => "3"}
                %circle{:cx => "6", :cy => "12", :r => "3"}
                %circle{:cx => "18", :cy => "19", :r => "3"}
                %line{:x1 => "8.59", :x2 => "15.42", :y1 => "13.51", :y2 => "17.49"}
                %line{:x1 => "15.41", :x2 => "8.59", :y1 => "6.51", :y2 => "10.49"}
              = t('brands.social_channels')
            %p.text-sm.text-gray-600= t('brands.social_channels_desc')
          .p-6.pt-0
            #channels-section
              .mb-4
                - if @presenter.has_brand_channels?
                  %p.text-sm.text-gray-600.mb-4
                    = t('brands.active_channels')
                    %span.font-medium= @presenter.channels_summary
                - else
                  %p.text-sm.text-gray-600.mb-4= t('brands.no_channels')
              #channels-container
                = form.fields_for :brand_channels do |channel_form|
                  = render Ui::BrandChannelFormComponent.new(form: channel_form, brand_channel: channel_form.object, index: channel_form.options[:child_index])
              %button#add-channel-btn.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.text-sm.font-medium.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.border.border-input.bg-background.hover:bg-accent.hover:text-accent-foreground.h-9.px-3.rounded-xl{:type => "button"}
                %svg.w-4.h-4.mr-2{:fill => "none", :stroke => "currentColor", :viewBox => "0 0 24 24"}
                  %path{:d => "M12 6v6m0 0v6m0-6h6m-6 0H6", "stroke-linecap" => "round", "stroke-linejoin" => "round", "stroke-width" => "2"}
                = t('brands.add_channel')

        / Save Button
        .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
          .p-6
            .flex.justify-center
              = render Ui::ButtonComponent.new(label: t('brands.save_profile'), variant: :primary, type: :submit, size: :lg)

:javascript
  document.addEventListener('turbo:load', function() {
    let audienceIndex = #{@brand.audiences.count};
    let productIndex = #{@brand.products.count};
    let channelIndex = #{@brand.brand_channels.count};

    // Add Audience functionality
    const addAudienceBtn = document.getElementById('add-audience-btn');
    const audiencesContainer = document.getElementById('audiences-container');

    if (addAudienceBtn && audiencesContainer) {
      addAudienceBtn.addEventListener('click', function() {
        const template = `
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
            <div class="flex items-center justify-between mb-4">
              <h4 class="text-md font-semibold text-theme">New Audience</h4>
              <button type="button" class="text-red-600 hover:text-red-800 text-sm font-medium remove-audience-btn">
                Remove
              </button>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="space-y-2">
                <label class="block text-sm font-medium text-theme">Audience Name</label>
                <input type="text" name="brand[audiences_attributes][${audienceIndex}][name]" placeholder="e.g., Young Professionals, Tech Enthusiasts" class="form-input w-full">
              </div>
              
              <div class="md:col-span-2 space-y-4">
                <label class="block text-sm font-medium text-theme">Demographics</label>
                <div class="bg-white border rounded-lg p-4 space-y-3">
                  <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <!-- Age Range -->
                    <div class="space-y-2">
                      <label class="block text-xs font-medium text-gray-700">Age Range</label>
                      <select class="form-input w-full text-sm demographic-field" data-field="age_range">
                        <option value="">Select age range</option>
                        <option value="13-17">13-17</option>
                        <option value="18-24">18-24</option>
                        <option value="25-34">25-34</option>
                        <option value="35-44">35-44</option>
                        <option value="45-54">45-54</option>
                        <option value="55-64">55-64</option>
                        <option value="65+">65+</option>
                      </select>
                    </div>

                    <!-- Gender -->
                    <div class="space-y-2">
                      <label class="block text-xs font-medium text-gray-700">Gender</label>
                      <select class="form-input w-full text-sm demographic-field" data-field="gender">
                        <option value="">Select gender</option>
                        <option value="all">All genders</option>
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                        <option value="non_binary">Non-binary</option>
                        <option value="other">Other</option>
                      </select>
                    </div>

                    <!-- Location Type -->
                    <div class="space-y-2">
                      <label class="block text-xs font-medium text-gray-700">Location Type</label>
                      <select class="form-input w-full text-sm demographic-field" data-field="location_type">
                        <option value="">Select location type</option>
                        <option value="global">Global</option>
                        <option value="urban">Urban areas</option>
                        <option value="suburban">Suburban areas</option>
                        <option value="rural">Rural areas</option>
                        <option value="metropolitan">Metropolitan areas</option>
                      </select>
                    </div>
                  </div>

                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Specific Location -->
                    <div class="space-y-2">
                      <label class="block text-xs font-medium text-gray-700">Specific Location</label>
                      <input type="text" class="form-input w-full text-sm demographic-field" data-field="location" placeholder="e.g., United States, Europe, Latin America">
                    </div>

                    <!-- Income Level -->
                    <div class="space-y-2">
                      <label class="block text-xs font-medium text-gray-700">Income Level</label>
                      <select class="form-input w-full text-sm demographic-field" data-field="income">
                        <option value="">Select income level</option>
                        <option value="low">Low income</option>
                        <option value="lower_middle">Lower middle class</option>
                        <option value="middle">Middle class</option>
                        <option value="upper_middle">Upper middle class</option>
                        <option value="high">High income</option>
                      </select>
                    </div>
                  </div>

                  <!-- Hidden field to store the JSON -->
                  <input type="hidden" name="brand[audiences_attributes][${audienceIndex}][demographic_profile]" value="{}" class="demographic-json-field">
                </div>
              </div>

              <div class="space-y-2">
                <label class="block text-sm font-medium text-theme">Interests</label>
                <input type="text" name="brand[audiences_attributes][${audienceIndex}][interests]" placeholder="technology, fitness, travel, food" class="form-input w-full">
                <p class="text-xs text-gray-500">Separate with commas</p>
              </div>
              <div class="space-y-2">
                <label class="block text-sm font-medium text-theme">Digital Behavior</label>
                <input type="text" name="brand[audiences_attributes][${audienceIndex}][digital_behavior]" placeholder="social_media_active, online_shopper" class="form-input w-full">
                <p class="text-xs text-gray-500">Separate with commas</p>
              </div>
            </div>
          </div>
        `;
        audiencesContainer.insertAdjacentHTML('beforeend', template);
        audienceIndex++;
        
        // Initialize demographics for the newly added audience
        setTimeout(initializeDemographicsFields, 100);
      });
    }

    // Add Product functionality
    const addProductBtn = document.getElementById('add-product-btn');
    const productsContainer = document.getElementById('products-container');

    if (addProductBtn && productsContainer) {
      addProductBtn.addEventListener('click', function() {
        const template = `
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
            <div class="flex items-center justify-between mb-4">
              <h4 class="text-md font-semibold text-theme">New Product</h4>
              <button type="button" class="text-red-600 hover:text-red-800 text-sm font-medium remove-product-btn">
                Remove
              </button>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="space-y-2">
                <label class="block text-sm font-medium text-theme">Product Name</label>
                <input type="text" name="brand[products_attributes][${productIndex}][name]" placeholder="e.g., Premium SaaS Platform" class="form-input w-full">
              </div>
              <div class="space-y-2">
                <label class="block text-sm font-medium text-theme">Pricing</label>
                <input type="text" name="brand[products_attributes][${productIndex}][pricing_info]" placeholder="e.g., $99/month" class="form-input w-full">
              </div>
              <div class="md:col-span-2 space-y-2">
                <label class="block text-sm font-medium text-theme">Description</label>
                <textarea name="brand[products_attributes][${productIndex}][description]" placeholder="Describe what your product does..." rows="3" class="form-input w-full"></textarea>
              </div>
              <div class="md:col-span-2 space-y-2">
                <label class="block text-sm font-medium text-theme">Product URL</label>
                <input type="url" name="brand[products_attributes][${productIndex}][url]" placeholder="https://yourproduct.com" class="form-input w-full">
              </div>
            </div>
          </div>
        `;
        productsContainer.insertAdjacentHTML('beforeend', template);
        productIndex++;
      });
    }

    // Add Channel functionality
    const addChannelBtn = document.getElementById('add-channel-btn');
    const channelsContainer = document.getElementById('channels-container');

    if (addChannelBtn && channelsContainer) {
      addChannelBtn.addEventListener('click', function() {
        const template = `
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
            <div class="flex items-center justify-between mb-4">
              <h4 class="text-md font-semibold text-theme">New Channel</h4>
              <button type="button" class="text-red-600 hover:text-red-800 text-sm font-medium remove-channel-btn">
                Remove
              </button>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div class="space-y-2">
                <label class="block text-sm font-medium text-theme">Platform</label>
                <select name="brand[brand_channels_attributes][${channelIndex}][platform]" class="form-input w-full">
                  <option value="">Select Platform</option>
                  <option value="instagram">Instagram</option>
                  <option value="tiktok">Tiktok</option>
                  <option value="youtube">Youtube</option>
                  <option value="linkedin">Linkedin</option>
                </select>
              </div>
              <div class="space-y-2">
                <label class="block text-sm font-medium text-theme">Handle/Username</label>
                <input type="text" name="brand[brand_channels_attributes][${channelIndex}][handle]" placeholder="@yourbrand" class="form-input w-full">
              </div>
              <div class="space-y-2">
                <label class="block text-sm font-medium text-theme">Priority</label>
                <select name="brand[brand_channels_attributes][${channelIndex}][priority]" class="form-input w-full">
                  <option value="1">1 - Highest Priority</option>
                  <option value="2">2 - High Priority</option>
                  <option value="3">3 - Medium Priority</option>
                  <option value="4">4 - Low Priority</option>
                  <option value="5">5 - Lowest Priority</option>
                </select>
              </div>
            </div>
          </div>
        `;
        channelsContainer.insertAdjacentHTML('beforeend', template);
        channelIndex++;
      });
    }

    // Remove functionality for dynamically added and existing items
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('remove-audience-btn') ||
          e.target.classList.contains('remove-product-btn') ||
          e.target.classList.contains('remove-channel-btn')) {

        const container = e.target.closest('.bg-gray-50');
        const destroyCheckbox = container.querySelector('.destroy-checkbox');

        if (destroyCheckbox) {
          // For existing items, mark for destruction
          destroyCheckbox.checked = true;
          container.style.display = 'none';
        } else {
          // For new items, remove from DOM
          container.remove();
        }
      }
    });

    // Demographics fields handling
    let demographicsListenersAdded = false;

    function initializeDemographicsFields() {
      // Initialize existing demographics fields
      document.querySelectorAll('.demographic-field').forEach(function(field) {
        const currentValue = field.getAttribute('data-current');
        if (currentValue && field.tagName === 'SELECT') {
          field.value = currentValue;
        }
      });

      // Add change listeners to update JSON (only once)
      if (!demographicsListenersAdded) {
        document.addEventListener('change', function(e) {
          if (e.target.classList.contains('demographic-field')) {
            updateDemographicJson(e.target);
          }
        });

        document.addEventListener('input', function(e) {
          if (e.target.classList.contains('demographic-field')) {
            updateDemographicJson(e.target);
          }
        });

        demographicsListenersAdded = true;
      }
    }

    function updateDemographicJson(changedField) {
      const container = changedField.closest('.bg-gray-50');
      if (!container) return;

      const jsonField = container.querySelector('.demographic-json-field');
      if (!jsonField) return;

      const demographicFields = container.querySelectorAll('.demographic-field:not(.demographic-json-field)');
      const demographicData = {};

      demographicFields.forEach(function(field) {
        const fieldName = field.getAttribute('data-field');
        const value = field.value.trim();
        if (fieldName && value) {
          demographicData[fieldName] = value;
        }
      });

      jsonField.value = JSON.stringify(demographicData);
    }

    // Initialize demographics when page loads
    initializeDemographicsFields();
  });