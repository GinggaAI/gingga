%main.flex-1.overflow-y-auto
  .p-8
    .max-w-6xl.mx-auto
      .mb-8
        %h1.text-3xl.font-bold.text-gray-900.mb-2= t('planning.title')
        %p.text-gray-600= t('planning.subtitle')

      .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl.mb-6
        .flex.items-center.justify-between.p-6
          .flex.items-center.gap-4
            %button#prev-month.px-3.py-1.text-gray-600.hover:text-gray-800.transition-colors{title: t('planning.navigation.previous_month')}
              %span ←
            %h2.text-2xl.font-bold.text-gray-900= @presenter.display_month
            %button#next-month.px-3.py-1.text-gray-600.hover:text-gray-800.transition-colors{title: t('planning.navigation.next_month')}
              %span →

          .flex.items-center.gap-3
            %button#toggle-overview.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.text-sm.font-medium.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.border.border-input.bg-background.hover:bg-accent.hover:text-accent-foreground.h-9.px-3.rounded-xl= t('planning.see_general_strategy')
            %button#voxa-refine.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.bg-primary.h-10.px-4.bg-gradient-to-r.text-white.font-medium.py-2.rounded-xl{class: "[&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:bg-primary/90 from-[#A37FFF] to-[#3AC8FF] hover:from-[#3AC8FF] hover:to-[#A37FFF]", style: "display: none;"}
              %span#voxa-button-text= t('planning.refine_with_voxa')
            %button#toggle-form.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.bg-primary.h-10.px-4.bg-gradient-to-r.text-black.font-medium.py-2.rounded-xl{class: "[&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:bg-primary/90 from-[#FFC940] to-[#FF6848] hover:from-[#FF6848] hover:to-[#A37FFF]"}
              %span#button-text= t('planning.add_content')

      #strategy-form.bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl.mb-6{style: "display: none;"}
        .p-6
        .flex.items-center.justify-between.mb-4
          %h3.text-lg.font-semibold= t('planning.strategy_form.title')
          #form-status.text-sm.text-gray-500{style: "display: none;"}

        = form_with url: creas_strategist_index_path, method: :post, local: false,
                    id: "strategy-creation-form", class: "strategy-form" do |form|
          = form.hidden_field :month, value: @presenter.safe_month_for_js

          .grid.grid-cols-1.md:grid-cols-2.gap-4.mb-4
            .col-span-1
              = form.label "strategy_form[objective_of_the_month]", t('planning.strategy_form.objective_label'), class: "block text-sm font-medium mb-1 text-gray-700"
              - options = options_for_select(strategy_objectives, 'awareness')
              = form.select "strategy_form[objective_of_the_month]", options, {}, class: "w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500", id: "objective-select"

            .col-span-1
              = form.label "strategy_form[objective_details]", t('planning.strategy_form.objective_details_label'),
                           class: "block text-sm font-medium mb-1 text-gray-700"
              = form.text_area "strategy_form[objective_details]",
                               placeholder: t('planning.strategy_form.objective_details_placeholder'),
                               rows: 3, class: "w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              %p.text-xs.text-gray-500.mt-1= t('planning.strategy_form.objective_details_help')

            .col-span-1
              = form.label "strategy_form[monthly_themes]", t('planning.strategy_form.monthly_themes_label'),
                  class: "block text-sm font-medium mb-1 text-gray-700"

              #monthly-themes-container.space-y-3
                / Recommended themes will be populated by JavaScript based on objective selection
                #recommended-themes.flex.flex-wrap.gap-2.mb-3
                  / Initial themes for 'awareness' objective
                  - recommended_themes_for('awareness').each do |theme|
                    = theme_chip(theme, selected: true)

                / Custom themes section
                #custom-themes.flex.flex-wrap.gap-2.mb-3

                / Add custom theme chip
                = add_custom_theme_chip

                / Custom theme input (hidden by default)
                #custom-theme-input.mt-2{style: "display: none;"}
                  .flex.gap-2.items-center
                    %input#custom-theme-text.flex-1.p-2.border.border-gray-300.rounded-md.focus:ring-2.focus:ring-blue-500.focus:border-blue-500{
                      type: "text",
                      placeholder: "Enter custom theme...",
                      maxlength: "50"
                    }
                    %button#add-custom-theme-btn.px-3.py-2.bg-blue-600.text-white.rounded-md.hover:bg-blue-700{type: "button"} Add
                    %button#cancel-custom-theme-btn.px-3.py-2.text-gray-600.hover:text-gray-800{type: "button"} Cancel

              / Hidden input to store selected themes as comma-separated string
              = form.hidden_field "strategy_form[monthly_themes]", id: "monthly-themes-hidden"

              %p.text-xs.text-gray-500.mt-1= t('planning.strategy_form.monthly_themes_help')

            .col-span-1
              = form.label "strategy_form[frequency_per_week]", t('planning.strategy_form.frequency_label'),
                  class: "block text-sm font-medium mb-1 text-gray-700"
              = form.number_field "strategy_form[frequency_per_week]",
                  placeholder: t('planning.strategy_form.frequency_placeholder'), min: 1, max: 7, value: 3,
                  class: "w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                  required: true


          .flex.justify-between.items-center
            %button#cancel-form.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.text-sm.font-medium.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.border.border-input.bg-background.hover:bg-accent.hover:text-accent-foreground.h-9.px-3.rounded-xl{type: "button"}
              = t('buttons.cancel')
            %button#submit-strategy.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.bg-primary.h-10.px-4.bg-gradient-to-r.text-black.font-medium.py-2.rounded-xl.disabled:bg-gray-400{class: "[&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:bg-primary/90 from-[#FFC940] to-[#FF6848] hover:from-[#FF6848] hover:to-[#A37FFF]", type: "submit"}
              %span.submit-text= t('planning.strategy_form.generate_strategy')
              %span.loading-spinner{style: "display: none;"}
                %svg.animate-spin.w-4.h-4.inline.mr-2{fill: "none", viewBox: "0 0 24 24"}
                  %circle.opacity-25{cx: "12", cy: "12", r: "10", stroke: "currentColor", "stroke-width": "4"}
                  %path.opacity-75{fill: "currentColor", d: "m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"}
                = t('planning.strategy_form.generating')

      #strategy-result.bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl.p-6.mb-6{style: "display: none;"}
        .flex.items-start.justify-between.mb-6
          .flex.items-center.gap-2
            %svg.w-5.h-5.text-green-600{fill: "currentColor", viewBox: "0 0 20 20"}
              %path{"fill-rule": "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z", "clip-rule": "evenodd"}
            %h2.text-xl.font-bold.text-green-700= t('planning.strategy_result.title')
          %button.text-gray-400.hover:text-gray-600.text-xl.font-bold{onclick: "hideStrategyOverview()"} &times;

        / Separator
        .w-full.h-px.bg-gray-200.mb-6

        / Metrics as KPIs
        .grid.grid-cols-2.md:grid-cols-4.gap-6.text-center.mb-6
          .space-y-1
            %p.text-sm.text-gray-500= t('planning.strategy_result.strategy_name_label')
            %p#strategy-name.text-lg.font-bold.text-gray-800 -
            %p.text-sm.text-gray-600= t('planning.strategy_result.content_strategy_label')
          .space-y-1
            %p.text-sm.text-gray-500= t('planning.strategy_result.posts_per_week_label')
            %p#strategy-frequency.text-2xl.font-extrabold.text-gray-900 -
          .space-y-1
            %p.text-sm.text-gray-500= t('planning.strategy_result.total_posts_label')
            %p#strategy-total.text-2xl.font-extrabold.text-gray-900 -
            %p.text-sm.text-gray-600= t('planning.strategy_result.posts_unit')
          .space-y-1
            %p.text-sm.text-gray-500= t('planning.strategy_result.monthly_objective_label')
            %p#strategy-objective.text-lg.font-bold.text-indigo-700 -

        / Separator
        .w-full.h-px.bg-gray-200.mb-6

        / Objective Details Section
        #objective-details-section.mb-6{style: "display: none;"}
          .space-y-3
            %h3.text-lg.font-bold.text-gray-800= t('planning.strategy_result.objective_details_title')
            #strategy-objective-details.text-gray-700.leading-relaxed -

        / Content Themes
        .space-y-3
          %h3.text-lg.font-bold.text-gray-800= t('planning.strategy_result.content_themes_title')
          #strategy-themes.flex.flex-wrap.gap-2 -

      #error-message.bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl.p-4.mb-6{style: "display: none;"}
        .flex.items-center.gap-2.text-red-800
          %svg.w-5.h-5{fill: "currentColor", viewBox: "0 0 20 20"}
            %path{"fill-rule": "evenodd", d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z", "clip-rule": "evenodd"}
          %span#error-text= t('planning.messages.error_generating')

      #incomplete-brief-alert.bg-amber-50.border.border-amber-200.rounded-2xl.p-4.mb-6{style: "display: none;"}
        .flex.items-start.gap-3.text-amber-800
          %svg.w-5.h-5.flex-shrink-0.mt-0.5{fill: "currentColor", viewBox: "0 0 20 20"}
            %path{"fill-rule": "evenodd", d: "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z", "clip-rule": "evenodd"}
          .flex-1
            %div#incomplete-brief-text
          .flex-shrink-0
            = link_to brand_path(@brand), class: "inline-flex items-center px-3 py-2 text-sm font-medium text-amber-700 bg-amber-100 border border-amber-300 rounded-lg hover:bg-amber-200 focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 transition-colors" do
              = t('planning.incomplete_brief.complete_setup')
              %svg.w-4.h-4.ml-2{fill: "none", stroke: "currentColor", viewBox: "0 0 24 24"}
                %path{"stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "2", d: "M13 7l5 5m0 0l-5 5m5-5H6"}

      - unless @current_strategy
        #no-strategy-message.bg-gray-50.border.border-gray-200.rounded-2xl.p-8.mb-6.text-center
          .mb-4
            %svg.w-16.h-16.mx-auto.text-gray-400{fill: "none", stroke: "currentColor", viewBox: "0 0 24 24"}
              %path{"stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "1.5", d: "M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"}
          %h3#no-strategy-title.text-xl.font-semibold.text-gray-700.mb-2= t('planning.no_strategy.title', month: @presenter.display_month)
          %p#no-strategy-description.text-gray-600.mb-4= t('planning.no_strategy.description')
          %button#create-strategy-btn.inline-flex.items-center.justify-center.gap-2.bg-gradient-to-r.from-yellow-400.to-orange-500.text-gray-900.font-bold.py-4.px-8.rounded-xl.shadow-lg.hover:from-yellow-500.hover:to-orange-600.hover:shadow-xl.transform.hover:scale-105.transition-all.duration-300{onclick: "document.getElementById('toggle-form').click()"}
            %svg.w-6.h-6{fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", "stroke-width": "2.5"}
              %path{"stroke-linecap": "round", "stroke-linejoin": "round", d: "M12 6v6m0 0v6m0-6h6m-6 0H6"}
            = t('planning.no_strategy.create_button', month: @presenter.display_month)

      .space-y-6
        - (1..4).each do |week_number|
          .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
            .flex.items-center.justify-between.p-4.border-b
              %h3.font-semibold.text-gray-900= "#{t('planning.weeks.week')} #{week_number}"
              .flex.items-center.gap-2
                %button.voxa-refine-week.inline-flex.items-center.justify-center.gap-1.whitespace-nowrap.text-xs.font-medium.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.bg-primary.h-8.px-3.bg-gradient-to-r.text-white.rounded-lg{class: "[&_svg]:pointer-events-none [&_svg]:size-3 [&_svg]:shrink-0 hover:bg-primary/90 from-[#A37FFF] to-[#3AC8FF] hover:from-[#3AC8FF] hover:to-[#A37FFF]", "data-week": week_number, style: "display: none;"}
                  %span.text-xs= t('planning.weeks.refine_week', number: week_number)
                %span.text-sm= t('planning.weeks.goal_label')
                %select.p-1.border.rounded.text-sm
                  %option= t('planning.weeks.goals.awareness')
                  %option= t('planning.weeks.goals.engagement')
                  %option= t('planning.weeks.goals.conversion')

            .p-4
              .grid.grid-cols-7.gap-4
                - [t('planning.weeks.days.mon'), t('planning.weeks.days.tue'), t('planning.weeks.days.wed'), t('planning.weeks.days.thu'), t('planning.weeks.days.fri'), t('planning.weeks.days.sat'), t('planning.weeks.days.sun')].each_with_index do |day, index|
                  .text-center
                    %h4.text-sm.font-medium.mb-2= day
                    .bg-gray-50.rounded.p-3.week-content-slot{style: "min-height: 120px;"}
                      %button.w-full.h-8.border-2.border-dashed.border-gray-300.rounded.text-gray-400.hover:border-gray-400.hover:text-gray-600
                        +

          .week-details.bg-gray-50.p-4.rounded.mt-4{style: "display: none;", id: "week-details-#{week_number - 1}"}
            .text-lg.font-semibold.mb-3.text-gray-700 📋 #{t('planning.weeks.week_details', number: week_number)}
            .content-details-grid.grid.grid-cols-1.gap-3

:javascript
  // Rails-first approach: Business logic moved to PlanningPresenter
  // JavaScript only handles UI interactions

  document.addEventListener('turbo:load', function() {
    // Initialize page variables with proper escaping
    window.currentMonth = #{@presenter.safe_month_for_js.to_json.html_safe};
    window.currentPlan = #{@presenter.current_plan_json.html_safe};
    const toggleBtn = document.getElementById('toggle-form');
    const overviewBtn = document.getElementById('toggle-overview');
    const voxaBtn = document.getElementById('voxa-refine');
    const form = document.getElementById('strategy-form');
    const resultDiv = document.getElementById('strategy-result');
    const cancelBtn = document.getElementById('cancel-form');
    const strategyForm = document.getElementById('strategy-creation-form');
    const submitBtn = document.getElementById('submit-strategy');
    const errorDiv = document.getElementById('error-message');
    const prevMonthBtn = document.getElementById('prev-month');
    const nextMonthBtn = document.getElementById('next-month');

    // Form toggle button
    if (toggleBtn && form) {
      toggleBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const isFormVisible = form.style.display !== 'none';
        form.style.display = isFormVisible ? 'none' : 'block';
        if (resultDiv) resultDiv.style.display = 'none';
        hideMessages();
      });
    }

    // Overview toggle button - same behavior as form toggle
    if (overviewBtn && resultDiv) {
      overviewBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const isResultVisible = resultDiv.style.display !== 'none';

        if (isResultVisible) {
          // Hide if currently visible
          resultDiv.style.display = 'none';
        } else {
          // Show with appropriate content
          if (window.currentPlan) {
            showStrategyOverview();
          } else {
            showBrandOverview();
          }
        }

        // Hide form and error messages (but not result div - we're managing that)
        if (form) form.style.display = 'none';
        hideErrorMessage();
      });
    }

    // Cancel button
    if (cancelBtn && form) {
      cancelBtn.addEventListener('click', function(e) {
        e.preventDefault();
        form.style.display = 'none';
        resetForm();
      });
    }

    // Form submission
    if (strategyForm && submitBtn) {
      strategyForm.addEventListener('submit', handleFormSubmit);
    }

    // Voxa refine button
    if (voxaBtn) {
      voxaBtn.addEventListener('click', handleVoxaRefine);
    }

    // Week-specific Voxa refine buttons
    const weekRefineButtons = document.querySelectorAll('.voxa-refine-week');
    weekRefineButtons.forEach(button => {
      button.addEventListener('click', handleVoxaRefineWeek);
    });


    // Initialize with existing plan if available
    if (window.currentPlan) {
      displayStrategyResult(window.currentPlan);
      populateCalendarWithStrategy(window.currentPlan);
      updateButtonText();
      updateOverviewButton();
      updateVoxaButton();
      // Keep overview hidden by default - user clicks to show, just like content details
      if (resultDiv) resultDiv.style.display = 'none';
    } else {
      // Hide overview button when no plan
      updateOverviewButton();
      updateVoxaButton();
    }

    // Month navigation
    if (prevMonthBtn) {
      prevMonthBtn.addEventListener('click', function(e) {
        e.preventDefault();
        navigateToMonth(getPreviousMonth(window.currentMonth));
      });
    }

    if (nextMonthBtn) {
      nextMonthBtn.addEventListener('click', function(e) {
        e.preventDefault();
        navigateToMonth(getNextMonth(window.currentMonth));
      });
    }

    // Also check for plan_id parameter for direct access
    const urlParams = new URLSearchParams(window.location.search);
    const planId = urlParams.get('plan_id');
    if (planId && (!window.currentPlan || window.currentPlan.id != planId)) {
      loadStrategyPlan(planId);
    }

    // Monthly themes chip functionality
    initializeThemeChips();
  });

  // Theme mapping configuration - mirrors the Rails helper
  const OBJECTIVE_THEMES = {
    'awareness': [
      'Brand Story & Origin',
      'Product/Service Showcase',
      'Industry Trends',
      'Community Spotlights'
    ],
    'engagement': [
      'Q&A / Behind the Scenes',
      'User-Generated Content',
      'Interactive Polls & Challenges',
      'Community Highlights'
    ],
    'sales': [
      'Product Benefits & Use Cases',
      'Comparisons / Alternatives',
      'Social Proof',
      'Offers & Promotions'
    ],
    'community': [
      'Educational / How-to Tips',
      'Advanced Product Use Cases',
      'Customer Appreciation',
      'Referral & Loyalty Programs'
    ]
  };

  function initializeThemeChips() {
    const objectiveSelect = document.getElementById('objective-select');
    const monthlyThemesHidden = document.getElementById('monthly-themes-hidden');

    if (!objectiveSelect || !monthlyThemesHidden) return;

    // Handle objective changes
    objectiveSelect.addEventListener('change', function() {
      updateRecommendedThemes(this.value);
      updateHiddenInput();
    });

    // Handle theme chip clicks
    document.addEventListener('click', function(e) {
      if (e.target.closest('[data-theme]')) {
        toggleThemeChip(e.target.closest('[data-theme]'));
        updateHiddenInput();
      }

      if (e.target.closest('[data-action="add-custom-theme"]')) {
        showCustomThemeInput();
      }

      if (e.target.closest('[data-action="remove-theme"]')) {
        e.stopPropagation();
        removeCustomTheme(e.target.closest('[data-theme]'));
        updateHiddenInput();
      }
    });

    // Handle custom theme input
    const addBtn = document.getElementById('add-custom-theme-btn');
    const cancelBtn = document.getElementById('cancel-custom-theme-btn');
    const customInput = document.getElementById('custom-theme-text');

    if (addBtn) {
      addBtn.addEventListener('click', addCustomTheme);
    }

    if (cancelBtn) {
      cancelBtn.addEventListener('click', hideCustomThemeInput);
    }

    if (customInput) {
      customInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          addCustomTheme();
        }
        if (e.key === 'Escape') {
          hideCustomThemeInput();
        }
      });
    }

    // Initialize with current selection
    updateHiddenInput();
  }

  function updateRecommendedThemes(objective) {
    const recommendedContainer = document.getElementById('recommended-themes');
    if (!recommendedContainer) return;

    const themes = OBJECTIVE_THEMES[objective] || [];
    recommendedContainer.innerHTML = '';

    themes.forEach(theme => {
      const chip = createThemeChip(theme, true, false);
      recommendedContainer.appendChild(chip);
    });
  }

  function createThemeChip(theme, selected = false, custom = false) {
    const chip = document.createElement('div');
    const baseClasses = [
      'inline-flex', 'items-center', 'gap-2', 'px-3', 'py-1.5', 'rounded-full',
      'text-sm', 'font-medium', 'cursor-pointer', 'transition-colors',
      'border', 'select-none'
    ];

    if (selected) {
      if (custom) {
        chip.className = baseClasses.concat(['bg-green-100', 'text-green-800', 'border-green-300']).join(' ');
      } else {
        chip.className = baseClasses.concat(['bg-blue-100', 'text-blue-800', 'border-blue-300']).join(' ');
      }
    } else {
      chip.className = baseClasses.concat(['bg-gray-100', 'text-gray-600', 'border-gray-300', 'hover:bg-gray-200']).join(' ');
    }

    chip.setAttribute('data-theme', theme);
    chip.setAttribute('data-selected', selected);

    const content = [];

    if (selected) {
      const checkmark = document.createElement('span');
      checkmark.textContent = '✓';
      checkmark.className = 'text-xs';
      content.push(checkmark);
    }

    const label = document.createElement('span');
    label.textContent = theme;
    content.push(label);

    if (custom) {
      const removeBtn = document.createElement('button');
      removeBtn.textContent = '×';
      removeBtn.type = 'button';
      removeBtn.className = 'ml-1 text-xs hover:text-red-600';
      removeBtn.setAttribute('data-action', 'remove-theme');
      content.push(removeBtn);
    }

    content.forEach(el => chip.appendChild(el));
    return chip;
  }

  function toggleThemeChip(chip) {
    const isSelected = chip.getAttribute('data-selected') === 'true';
    const theme = chip.getAttribute('data-theme');
    const isCustom = chip.closest('#custom-themes') !== null;

    if (isSelected) {
      // Deselect
      chip.setAttribute('data-selected', 'false');
      const newChip = createThemeChip(theme, false, isCustom);
      chip.parentNode.replaceChild(newChip, chip);
    } else {
      // Select
      chip.setAttribute('data-selected', 'true');
      const newChip = createThemeChip(theme, true, isCustom);
      chip.parentNode.replaceChild(newChip, chip);
    }
  }

  function showCustomThemeInput() {
    const input = document.getElementById('custom-theme-input');
    const textInput = document.getElementById('custom-theme-text');
    const addChip = document.getElementById('add-custom-theme-chip');

    if (input && addChip) {
      input.style.display = 'block';
      addChip.style.display = 'none';
      if (textInput) {
        textInput.focus();
      }
    }
  }

  function hideCustomThemeInput() {
    const input = document.getElementById('custom-theme-input');
    const textInput = document.getElementById('custom-theme-text');
    const addChip = document.getElementById('add-custom-theme-chip');

    if (input && addChip && textInput) {
      input.style.display = 'none';
      addChip.style.display = 'inline-flex';
      textInput.value = '';
    }
  }

  function addCustomTheme() {
    const textInput = document.getElementById('custom-theme-text');
    const customContainer = document.getElementById('custom-themes');

    if (!textInput || !customContainer) return;

    const theme = textInput.value.trim();
    if (!theme) return;

    // Check if theme already exists
    const existing = document.querySelector(`[data-theme="${CSS.escape(theme)}"]`);
    if (existing) {
      hideCustomThemeInput();
      return;
    }

    // Create and add custom theme chip
    const chip = createThemeChip(theme, true, true);
    customContainer.appendChild(chip);

    hideCustomThemeInput();
    updateHiddenInput();
  }

  function removeCustomTheme(chip) {
    chip.remove();
  }

  function updateHiddenInput() {
    const hiddenInput = document.getElementById('monthly-themes-hidden');
    if (!hiddenInput) return;

    const selectedChips = document.querySelectorAll('[data-theme][data-selected="true"]');
    const themes = Array.from(selectedChips).map(chip => chip.getAttribute('data-theme'));

    hiddenInput.value = themes.join(', ');
  }

  function handleFormSubmit(e) {
    e.preventDefault();

    const form = e.target;
    const submitBtn = document.getElementById('submit-strategy');
    const submitText = submitBtn.querySelector('.submit-text');
    const loadingSpinner = submitBtn.querySelector('.loading-spinner');

    // Show loading state
    setLoadingState(true, submitBtn, submitText, loadingSpinner);
    hideMessages();

    // Update no-strategy message to indicate process started
    updateNoStrategyMessage(true);

    const formData = new FormData(form);

    // Form data prepared for submission

    // Create AbortController for timeout handling
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 second timeout

    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      signal: controller.signal
    })
    .then(response => {
      clearTimeout(timeoutId);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      setLoadingState(false, submitBtn, submitText, loadingSpinner);

      if (data.success) {
        // Show immediate feedback to user
        alert('#{t('planning.js_messages.strategy_being_created_alert')}');

        // Check if the plan is immediately completed (sync) or pending (async)
        if (data.plan.status === 'completed') {
          // Handle completed plan immediately
          window.currentPlan = data.plan;
          displayStrategyResult(data.plan, true);
          populateCalendarWithStrategy(data.plan);
          document.getElementById('strategy-form').style.display = 'none';
          resetForm();
          updateButtonText();
          updateOverviewButton();
          updateVoxaButton();

          // Update URL with plan_id without page reload
          if (data.plan && data.plan.id) {
            const newUrl = new URL(window.location);
            newUrl.searchParams.set('plan_id', data.plan.id);
            window.history.pushState({}, '', newUrl);
          }
        } else if (data.plan.status === 'pending') {
          // Handle pending plan - show processing UI and start polling
          showProcessingStrategy(data.plan);
          startPollingStrategy(data.plan.id);

          // Update URL with plan_id
          if (data.plan && data.plan.id) {
            const newUrl = new URL(window.location);
            newUrl.searchParams.set('plan_id', data.plan.id);
            window.history.pushState({}, '', newUrl);
          }
        } else {
          showError('Strategy generation failed');
        }
      } else {
        showError(data.error || 'Failed to generate strategy');
      }
    })
    .catch(error => {
      clearTimeout(timeoutId);
      setLoadingState(false, submitBtn, submitText, loadingSpinner);

      if (error.name === 'AbortError') {
        // Strategy might still be generating, check for it
        showError('#{t('planning.messages.generation_timeout')}');
        setTimeout(() => checkExistingStrategy(currentMonth), 5000);
      } else {
        showError('#{t('planning.messages.network_error')}');
      }
    });
  }

  function setLoadingState(loading, submitBtn, submitText, loadingSpinner) {
    if (loading) {
      submitBtn.disabled = true;
      submitText.style.display = 'none';
      loadingSpinner.style.display = 'inline-flex';
    } else {
      submitBtn.disabled = false;
      submitText.style.display = 'inline';
      loadingSpinner.style.display = 'none';
    }
  }

  function displayStrategyResult(plan, shouldShow = false) {
    const resultDiv = document.getElementById('strategy-result');
    if (!resultDiv || !plan) return;

    // Restore original title when showing strategy
    const titleEl = resultDiv.querySelector('h2');
    if (titleEl) {
      titleEl.textContent = '#{t('planning.strategy_result.title')}';
      titleEl.className = 'text-lg font-semibold text-green-800';
    }

    // Restore the original green icon for strategy success
    const iconEl = resultDiv.querySelector('svg');
    if (iconEl) {
      iconEl.className = 'w-5 h-5 text-green-600';
      iconEl.innerHTML = '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>';
    }

    // Update result content
    document.getElementById('strategy-name').textContent = plan.strategy_name || '-';
    document.getElementById('strategy-frequency').textContent = plan.frequency_per_week || '-';
    document.getElementById('strategy-total').textContent =
      plan.frequency_per_week ? (plan.frequency_per_week * 4) : '-';
    document.getElementById('strategy-objective').textContent = plan.objective_of_the_month || '-';

    // Update objective details section
    const objectiveDetailsEl = document.getElementById('strategy-objective-details');
    const objectiveDetailsSection = document.getElementById('objective-details-section');
    if (objectiveDetailsEl && objectiveDetailsSection) {
      if (plan.objective_details && plan.objective_details.trim()) {
        objectiveDetailsEl.textContent = plan.objective_details;
        objectiveDetailsSection.style.display = 'block';
      } else {
        objectiveDetailsSection.style.display = 'none';
      }
    }

    // Update themes - extract from content_distribution or use monthly_themes
    const themesEl = document.getElementById('strategy-themes');
    let themes = [];

    // Try to get themes from monthly_themes first
    if (plan.monthly_themes && plan.monthly_themes.length > 0) {
      themes = plan.monthly_themes;
    }
    // If empty, extract themes from content_distribution
    else if (plan.content_distribution) {
      themes = Object.keys(plan.content_distribution).map(key => {
        const dist = plan.content_distribution[key];
        return dist.goal || key; // Use goal or the key itself as theme
      });
    }

    if (themes.length > 0) {
      // Simple secondary badge styling like in the React example
      themesEl.innerHTML = themes.map(theme =>
        `<span class="inline-flex items-center px-3 py-1 rounded-md text-sm font-medium bg-gray-100 text-gray-800 border border-gray-200">${theme}</span>`
      ).join('');
    } else {
      themesEl.innerHTML = '<span class="text-gray-500 italic">#{t('planning.strategy_result.no_themes')}</span>';
    }

    // Only show if explicitly requested (like after form submission)
    if (shouldShow) {
      resultDiv.style.display = 'block';
      resultDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    // Setup close button
    const closeBtn = document.getElementById('close-result');
    if (closeBtn) {
      closeBtn.onclick = function() {
        resultDiv.style.display = 'none';
      };
    }
  }

  function showError(message) {
    const errorDiv = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');

    if (errorDiv && errorText) {
      errorText.textContent = message;
      errorDiv.style.display = 'block';
      errorDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }

  function showIncompleteBriefAlert(message) {
    const alertDiv = document.getElementById('incomplete-brief-alert');
    const alertText = document.getElementById('incomplete-brief-text');

    if (alertDiv && alertText) {
      alertText.innerHTML = `
        <strong>#{t('planning.js_messages.missing_information_required')}</strong><br>
        #{t('planning.js_messages.brand_profile_missing_info')}<br><br>
        <em>Details: ${message}</em>
      `;
      alertDiv.style.display = 'block';
      alertDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }

  function hideMessages() {
    const resultDiv = document.getElementById('strategy-result');
    const errorDiv = document.getElementById('error-message');
    const incompleteBriefAlert = document.getElementById('incomplete-brief-alert');

    if (resultDiv) resultDiv.style.display = 'none';
    if (errorDiv) errorDiv.style.display = 'none';
    if (incompleteBriefAlert) incompleteBriefAlert.style.display = 'none';
  }

  function updateNoStrategyMessage(isProcessing) {
    const titleElement = document.getElementById('no-strategy-title');
    const descriptionElement = document.getElementById('no-strategy-description');
    const buttonElement = document.getElementById('create-strategy-btn');

    if (!titleElement || !descriptionElement || !buttonElement) return;

    if (isProcessing) {
      titleElement.textContent = '#{t('planning.js_messages.strategy_generation_in_progress')}';
      descriptionElement.textContent = '#{t('planning.js_messages.strategy_being_created')}';
      buttonElement.style.display = 'none';
    } else {
      // Restore original text (this will be handled by page refresh in practice)
      titleElement.textContent = `No Strategy for ${window.currentMonth || 'this month'}`;
      descriptionElement.textContent = 'There is no content strategy for this month yet.';
      buttonElement.style.display = 'inline-flex';
    }
  }

  function hideErrorMessage() {
    const errorDiv = document.getElementById('error-message');
    if (errorDiv) errorDiv.style.display = 'none';
  }

  function resetForm() {
    const form = document.getElementById('strategy-creation-form');
    if (form) {
      // Reset all form fields except hidden month field
      const inputs = form.querySelectorAll('input:not([type="hidden"]), textarea, select');
      inputs.forEach(input => {
        if (input.type === 'number') {
          input.value = input.getAttribute('value') || '';
        } else {
          input.value = '';
        }
      });
    }
  }

  function loadStrategyPlan(planId) {
    fetch(`/creas_strategy_plans/${planId}`)
      .then(response => response.json())
      .then(plan => {
        window.currentPlan = plan;
        displayStrategyResult(plan, false); // Just populate content, don't show
        populateCalendarWithStrategy(plan);
        updateButtonText();
        updateOverviewButton();
        updateVoxaButton();
      })
      .catch(error => {
        showError('#{t('planning.messages.failed_to_load')}');
      });
  }

  function checkExistingStrategy(month) {
    fetch(`/planning/strategies/for_month?month=${month}`)
      .then(response => {
        if (response.ok) {
          return response.json();
        }
        throw new Error('No strategy found');
      })
      .then(plan => {
        if (plan && plan.id) {
          window.currentPlan = plan;
          displayStrategyResult(plan, false); // Just populate content, don't show
          populateCalendarWithStrategy(plan);
          updateButtonText();
          updateVoxaButton();

          // Update URL with plan_id
          const newUrl = new URL(window.location);
          newUrl.searchParams.set('plan_id', plan.id);
          window.history.pushState({}, '', newUrl);
        }
      })
      .catch(error => {
        // Keep form closed by default but ready to use
        document.getElementById('strategy-form').style.display = 'none';
      });
  }

  function updateButtonText() {
    const buttonText = document.getElementById('button-text');
    if (buttonText && window.currentPlan) {
      buttonText.textContent = '#{t('planning.add_new_content')}';
    } else if (buttonText) {
      buttonText.textContent = '#{t('planning.add_content')}';
    }
  }

  function updateOverviewButton() {
    const overviewBtn = document.getElementById('toggle-overview');
    // Always show the overview button if we have a brand
    if (overviewBtn) {
      overviewBtn.style.display = 'inline-block';
      overviewBtn.style.opacity = '1';
      // Update button text based on whether we have a strategy or not
      if (window.currentPlan) {
        overviewBtn.textContent = '#{t('planning.see_content_strategy')}';
      } else {
        overviewBtn.textContent = '#{t('planning.see_brand_overview')}';
      }
    }
  }

  function populateCalendarWithStrategy(plan) {
    if (!plan || !plan.weekly_plan) return;

    // Clear existing content first
    const allContentSlots = document.querySelectorAll('.week-content-slot');
    allContentSlots.forEach(slot => {
      slot.innerHTML = '<button class="w-full h-8 border-2 border-dashed border-gray-300 rounded text-gray-400 hover:border-gray-400 hover:text-gray-600">+</button>';
    });

    // Populate with new content from weekly_plan structure
    const weeklyPlan = plan.weekly_plan || [];
    weeklyPlan.forEach((week, weekIndex) => {

      // Handle different possible structures in weekly_plan
      // Look for content in various possible fields
      let contentPieces = [];

      if (week.content_pieces) {
        contentPieces = week.content_pieces;
      } else if (week.posts) {
        contentPieces = week.posts;
      } else if (week.ideas) {
        contentPieces = week.ideas;
      } else if (Array.isArray(week)) {
        contentPieces = week;
      }

      contentPieces.forEach((piece, pieceIndex) => {
        addContentToCalendar(weekIndex, pieceIndex % 7, piece); // Distribute across days
      });
    });
  }

  function getDayIndex(dayName) {
    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    return days.indexOf(dayName);
  }

  function getDayIndexFromPiece(piece) {
    // Handle different day formats that might come from the API
    let dayName = piece.day || piece.scheduled_day || piece.publish_day;

    if (!dayName) {
      // If no day specified, try to extract from other fields
      return -1;
    }

    // Handle different day formats
    if (typeof dayName === 'string') {
      // Convert "Mon", "Tue" etc to full names
      const shortToFull = {
        'Mon': 'Monday', 'Tue': 'Tuesday', 'Wed': 'Wednesday', 'Thu': 'Thursday',
        'Fri': 'Friday', 'Sat': 'Saturday', 'Sun': 'Sunday'
      };

      dayName = shortToFull[dayName] || dayName;
    }

    return getDayIndex(dayName);
  }

  function addContentToCalendar(weekIndex, dayIndex, contentPiece) {
    // Use a more specific selector to avoid form/result sections
    const weekElements = document.querySelectorAll('.space-y-6 > .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl');
    // Count correctly: skip form and result sections, find actual week containers
    let actualWeekIndex = 0;
    let weekElement = null;

    for (let i = 0; i < weekElements.length; i++) {
      const element = weekElements[i];
      // Look for elements that contain week content (have the week structure)
      if (element.querySelector('.week-content-slot')) {
        if (actualWeekIndex === weekIndex) {
          weekElement = element;
          break;
        }
        actualWeekIndex++;
      }
    }

    if (!weekElement) {
      return;
    }

    const dayElements = weekElement.querySelectorAll('.week-content-slot');
    const dayElement = dayElements[dayIndex];

    if (!dayElement) {
      return;
    }

    // Extract content information from the piece
    const platform = contentPiece.platform || 'Instagram';
    const contentType = contentPiece.type || contentPiece.content_type || 'Post';
    const title = contentPiece.title || contentPiece.hook || contentPiece.cta || 'Draft';
    const status = contentPiece.status || 'draft';
    const icon = getContentIcon(platform, contentType);

    // Different styling based on status
    const statusStyles = {
      'draft': 'bg-gray-100 text-gray-700 border-l-4 border-gray-400',
      'in_production': 'bg-blue-100 text-blue-700 border-l-4 border-blue-500',
      'ready_for_review': 'bg-yellow-100 text-yellow-700 border-l-4 border-yellow-500',
      'approved': 'bg-green-100 text-green-700 border-l-4 border-green-500'
    };

    const statusStyle = statusStyles[status] || statusStyles['draft'];
    const statusBadge = status !== 'draft' ? `<span class="inline-block w-2 h-2 rounded-full bg-current opacity-60 mr-1"></span>` : '';

    const contentDiv = document.createElement('div');
    contentDiv.className = `${statusStyle} text-xs p-2 rounded mb-2 cursor-pointer hover:opacity-80 transition-all`;

    // For in_production posts, show hook and CTA if available
    let cardContent = `${statusBadge}${icon} ${title.length > 18 ? title.substring(0, 18) + '...' : title}`;
    if (status === 'in_production') {
      let extraInfo = [];
      if (contentPiece.hook) {
        extraInfo.push(`🎣 ${contentPiece.hook.length > 15 ? contentPiece.hook.substring(0, 15) + '...' : contentPiece.hook}`);
      }
      if (contentPiece.cta) {
        extraInfo.push(`📢 ${contentPiece.cta.length > 15 ? contentPiece.cta.substring(0, 15) + '...' : contentPiece.cta}`);
      }
      if (extraInfo.length > 0) {
        cardContent += `<div class="mt-1 text-[10px] opacity-75">${extraInfo.join('<br>')}</div>`;
      }
    }

    contentDiv.innerHTML = cardContent;

    // Enhanced tooltip for in_production posts
    let tooltipText = `${title} (${status.replace('_', ' ')})`;
    if (status === 'in_production') {
      if (contentPiece.hook) {
        tooltipText += `\n🎣 Hook: ${contentPiece.hook}`;
      }
      if (contentPiece.cta) {
        tooltipText += `\n📢 CTA: ${contentPiece.cta}`;
      }
    }
    contentDiv.title = tooltipText;
    contentDiv.onclick = () => showContentDetails(weekIndex, contentPiece);

    // Insert before the + button
    const addButton = dayElement.querySelector('button');
    if (addButton) {
      dayElement.insertBefore(contentDiv, addButton);
    } else {
      dayElement.appendChild(contentDiv);
    }
  }

  function getContentIcon(platform, contentType) {
    // Default to Instagram Reel icon as mentioned all content is reels for now
    const platformIcons = {
      'Instagram': '📸',
      'TikTok': '🎵',
      'YouTube': '🎥',
      'Facebook': '👥',
      'Twitter': '🐦',
      'LinkedIn': '💼'
    };

    // Content type icons
    const typeIcons = {
      'Reel': '🎬',
      'Post': '📸',
      'Story': '📱',
      'Carousel': '🖼️',
      'Video': '🎥'
    };

    // Since you mentioned all are reels for now, use the reel icon
    if (contentType && typeIcons[contentType]) {
      return typeIcons[contentType];
    }

    // Otherwise, use platform specific icon or default to reel
    return platformIcons[platform] || '🎬';
  }

  // Rails-first AJAX approach: Let server render content details
  function showContentDetails(weekIndex, contentPiece) {
    const weekDetailsId = `week-details-${weekIndex}`;
    let weekDetails = document.getElementById(weekDetailsId);

    // If week details section doesn't exist, create it
    if (!weekDetails) {
      const weekElements = document.querySelectorAll('.space-y-6 > .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl');
      let actualWeekIndex = 0;
      let weekElement = null;

      for (let i = 0; i < weekElements.length; i++) {
        const element = weekElements[i];
        if (element.querySelector('.week-content-slot')) {
          if (actualWeekIndex === weekIndex) {
            weekElement = element;
            break;
          }
          actualWeekIndex++;
        }
      }

      if (!weekElement) return;

      weekDetails = document.createElement('div');
      weekDetails.id = weekDetailsId;
      weekDetails.className = 'week-details bg-gray-50 p-4 rounded mt-4';
      weekDetails.style.display = 'none';
      weekDetails.innerHTML = `
        <div class="flex justify-between items-center mb-3">
          <div class="text-lg font-semibold text-gray-700">📋 Week ${weekIndex + 1} Details</div>
          <button onclick="hideContentDetails('${weekDetailsId}')" class="text-gray-500 hover:text-gray-700 text-xl">&times;</button>
        </div>
        <div class="content-details-grid grid grid-cols-1 gap-3"></div>
      `;

      weekElement.appendChild(weekDetails);
    }

    // Use Rails AJAX endpoint to render content details
    const detailsGrid = weekDetails.querySelector('.content-details-grid');

    // Show loading state
    detailsGrid.innerHTML = '<div class="p-4 text-center text-gray-500">#{t('planning.js_messages.loading_content_details')}</div>';

    // Make AJAX request to Rails controller
    const params = new URLSearchParams({
      content_data: JSON.stringify(contentPiece)
    });

    fetch(`/planning/content_details?${params}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.html) {
        // Server-rendered HTML replaces client-side template logic
        detailsGrid.innerHTML = data.html;
        weekDetails.style.display = 'block';
        weekDetails.scrollIntoView({ behavior: 'smooth', block: 'start' });
      } else {
        detailsGrid.innerHTML = '<div class="p-4 text-center text-red-500">#{t('planning.js_messages.error_loading_content_details')}</div>';
      }
    })
    .catch(error => {
      console.error('Error fetching content details:', error);
      detailsGrid.innerHTML = '<div class="p-4 text-center text-red-500">#{t('planning.js_messages.failed_to_load_content_details')}</div>';
    });
  }

  function hideContentDetails(weekDetailsId) {
    const weekDetails = document.getElementById(weekDetailsId);
    if (weekDetails) {
      weekDetails.style.display = 'none';
      // Clear the content details
      const detailsGrid = weekDetails.querySelector('.content-details-grid');
      if (detailsGrid) {
        detailsGrid.innerHTML = '';
      }
    }
  }

  function removeContentDetail(contentId) {
    const contentDetail = document.getElementById(contentId);
    if (contentDetail) {
      contentDetail.remove();

      // If this was the last content detail in the section, hide the whole section
      const parentGrid = contentDetail.parentElement;
      if (parentGrid && parentGrid.children.length === 0) {
        const weekDetails = parentGrid.closest('.week-details');
        if (weekDetails) {
          weekDetails.style.display = 'none';
        }
      }
    }
  }

  function showStrategyOverview() {
    const resultDiv = document.getElementById('strategy-result');
    if (resultDiv && window.currentPlan) {
      resultDiv.style.display = 'block';
      resultDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }

  function showBrandOverview() {
    const resultDiv = document.getElementById('strategy-result');
    if (resultDiv) {
      // Update the title and content for brand overview
      const titleEl = resultDiv.querySelector('h3');
      if (titleEl) {
        titleEl.textContent = '#{t('planning.brand_overview.title')}';
        titleEl.className = 'text-lg font-semibold text-blue-800';
      }

      // Update the icon for brand overview
      const iconEl = resultDiv.querySelector('svg');
      if (iconEl) {
        iconEl.className = 'w-5 h-5 text-blue-600';
        iconEl.innerHTML = '<path fill-rule="evenodd" d="M4 2a2 2 0 00-2 2v11a2 2 0 002 2h12a2 2 0 002-2V4a2 2 0 00-2-2H4zm3 2h6v2H7V4zm8 6a1 1 0 100-2 1 1 0 000 2zm-8-1a1 1 0 11-2 0 1 1 0 012 0zm0 4a1 1 0 11-2 0 1 1 0 012 0zm3 1h4v-2H8v2z" clip-rule="evenodd"></path>';
      }

      // Update strategy content with brand info placeholder
      document.getElementById('strategy-name').textContent = '#{t('planning.brand_overview.no_strategy')}';
      document.getElementById('strategy-frequency').textContent = '#{t('planning.brand_overview.get_started')}';
      document.getElementById('strategy-total').textContent = '-';
      document.getElementById('strategy-objective').textContent = '#{t('planning.brand_overview.create_first')}';

      const themesEl = document.getElementById('strategy-themes');
      themesEl.innerHTML = '<span class="text-gray-500 italic">#{t('planning.brand_overview.themes_placeholder')}</span>';

      resultDiv.style.display = 'block';
      resultDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }

  function hideStrategyOverview() {
    const resultDiv = document.getElementById('strategy-result');
    if (resultDiv) {
      resultDiv.style.display = 'none';
    }
  }


  function updateVoxaButton() {
    const voxaBtn = document.getElementById('voxa-refine');
    const weekRefineButtons = document.querySelectorAll('.voxa-refine-week');

    const shouldShow = window.currentPlan && window.currentPlan.id;

    // Update main Voxa button
    if (voxaBtn) {
      voxaBtn.style.display = shouldShow ? 'inline-block' : 'none';
    }

    // Update week-specific Voxa buttons
    weekRefineButtons.forEach(button => {
      button.style.display = shouldShow ? 'inline-flex' : 'none';
    });
  }

  function handleVoxaRefine(e) {
    e.preventDefault();

    if (!window.currentPlan || !window.currentPlan.id) {
      showError('#{t('planning.messages.no_strategy_to_refine')}');
      return;
    }

    const voxaBtn = document.getElementById('voxa-refine');
    const voxaButtonText = document.getElementById('voxa-button-text');

    // Show loading state
    if (voxaBtn) voxaBtn.disabled = true;
    if (voxaButtonText) voxaButtonText.textContent = '#{t('planning.content.refining')}';

    hideMessages();

    // Create form and submit
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/planning/content_refinements';

    // Add CSRF token
    const csrfToken = document.querySelector('meta[name="csrf-token"]');
    if (csrfToken) {
      const csrfInput = document.createElement('input');
      csrfInput.type = 'hidden';
      csrfInput.name = 'authenticity_token';
      csrfInput.value = csrfToken.getAttribute('content');
      form.appendChild(csrfInput);
    }

    // Add plan_id
    const planIdInput = document.createElement('input');
    planIdInput.type = 'hidden';
    planIdInput.name = 'plan_id';
    planIdInput.value = window.currentPlan.id;
    form.appendChild(planIdInput);

    // Submit form
    document.body.appendChild(form);
    form.submit();
  }

  function handleVoxaRefineWeek(e) {
    e.preventDefault();

    if (!window.currentPlan || !window.currentPlan.id) {
      showError('#{t('planning.messages.no_strategy_to_refine')}');
      return;
    }

    const weekNumber = e.target.closest('button').getAttribute('data-week');

    if (!weekNumber) {
      showError('#{t('planning.js_messages.invalid_week_number')}');
      return;
    }

    const button = e.target.closest('button');
    const originalText = button.textContent;

    // Show loading state
    button.disabled = true;
    button.textContent = `#{t('planning.js_messages.refining_week', week: '${weekNumber}')}`.replace('${weekNumber}', weekNumber);

    hideMessages();

    // Create form and submit
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/planning/content_refinements/week';

    // Add CSRF token
    const csrfToken = document.querySelector('meta[name="csrf-token"]');
    if (csrfToken) {
      const csrfInput = document.createElement('input');
      csrfInput.type = 'hidden';
      csrfInput.name = 'authenticity_token';
      csrfInput.value = csrfToken.getAttribute('content');
      form.appendChild(csrfInput);
    }

    // Add plan_id
    const planIdInput = document.createElement('input');
    planIdInput.type = 'hidden';
    planIdInput.name = 'plan_id';
    planIdInput.value = window.currentPlan.id;
    form.appendChild(planIdInput);

    // Add week_number
    const weekInput = document.createElement('input');
    weekInput.type = 'hidden';
    weekInput.name = 'week_number';
    weekInput.value = weekNumber;
    form.appendChild(weekInput);

    // Submit form
    document.body.appendChild(form);
    form.submit();
  }

  // Month navigation helper functions
  function getPreviousMonth(currentMonth) {
    const [year, month] = currentMonth.split('-').map(Number);
    const date = new Date(year, month - 2); // month - 1 for 0-based, -1 more for previous
    return `${date.getFullYear()}-${date.getMonth() + 1}`;
  }

  function getNextMonth(currentMonth) {
    const [year, month] = currentMonth.split('-').map(Number);
    const date = new Date(year, month); // month - 1 for 0-based, +1 for next = month
    return `${date.getFullYear()}-${date.getMonth() + 1}`;
  }

  function navigateToMonth(newMonth) {
    // Update URL and reload page with new month
    const url = new URL(window.location);
    url.searchParams.set('month', newMonth);
    url.searchParams.delete('plan_id'); // Remove plan_id when navigating by month
    window.location.href = url.toString();
  }

  function showProcessingStrategy(plan) {
    const strategyCard = document.getElementById('strategy-card');
    const strategyTitle = document.getElementById('strategy-title');
    const strategyDescription = document.getElementById('strategy-description');

    if (strategyCard) {
      strategyCard.style.display = 'block';
      strategyCard.className = 'bg-yellow-50 border border-yellow-200 p-6 rounded-xl shadow-sm';
    }

    if (strategyTitle) {
      strategyTitle.innerHTML = '<span class="animate-pulse">🔄 #{t("planning.strategy.processing")}</span>';
    }

    if (strategyDescription) {
      strategyDescription.innerHTML = `
        <div class="text-center py-8">
          <div class="animate-spin inline-block w-8 h-8 border-[3px] border-current border-t-transparent text-blue-600 rounded-full mb-4" role="status" aria-label="loading">
            <span class="sr-only">Loading...</span>
          </div>
          <p class="text-gray-600 mb-2">#{t("planning.strategy.generating_strategy")}</p>
          <p class="text-sm text-gray-500">#{t("planning.strategy.please_wait")}</p>
        </div>
      `;
    }

    // Hide form and show processing state
    const strategyForm = document.getElementById('strategy-form');
    if (strategyForm) {
      strategyForm.style.display = 'none';
    }

    // Store current plan for polling
    window.currentPlan = plan;
  }

  function startPollingStrategy(planId) {
    let pollCount = 0;
    const maxPolls = 60; // Poll for up to 5 minutes (5 second intervals)

    const pollInterval = setInterval(() => {
      pollCount++;

      if (pollCount >= maxPolls) {
        clearInterval(pollInterval);
        showError('#{t("planning.messages.generation_timeout")}');
        return;
      }

      fetch(`/strategy_plan_status/${planId}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.completed) {
          clearInterval(pollInterval);

          // Update current plan with completed data
          window.currentPlan = data.plan;

          // Display the completed strategy
          displayStrategyResult(data.plan, true);
          populateCalendarWithStrategy(data.plan);

          // Update UI states
          updateButtonText();
          updateOverviewButton();
          updateVoxaButton();
        } else if (data.failed) {
          clearInterval(pollInterval);

          // Check if this is an incomplete brief error
          if (data.meta && data.meta.error_type === 'incomplete_brief') {
            showIncompleteBriefAlert(data.error_message);
          } else {
            showError(data.error_message || '#{t("planning.messages.generation_failed")}');
          }
        }
        // If still processing, continue polling
      })
      .catch(error => {
        if (pollCount >= 3) { // Stop polling after 3 consecutive errors
          clearInterval(pollInterval);
          showError('#{t("planning.messages.network_error")}');
        }
      });
    }, 5000); // Poll every 5 seconds
  }

  // Business logic functions removed - moved to PlanningPresenter and PlanningHelper
  // createReelFromPlanning functionality now handled by Rails helper render_create_reel_button
