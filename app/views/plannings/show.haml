%main.flex-1.overflow-y-auto
  .p-8
    .max-w-6xl.mx-auto
      .mb-8
        %h1.text-3xl.font-bold.text-gray-900.mb-2 Smart Planning
        %p.text-gray-600 Plan your content strategy with AI-powered insights

      .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl.mb-6
        .flex.items-center.justify-between.p-6
          .flex.items-center.gap-4
            %button.px-3.py-1.text-gray-600.hover:text-gray-800
              %span ‚Üê
            %h2.text-2xl.font-bold.text-gray-900= @presenter.display_month
            %button.px-3.py-1.text-gray-600.hover:text-gray-800
              %span ‚Üí
          
          .flex.items-center.gap-3
            %button#toggle-overview.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.text-sm.font-medium.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.border.border-input.bg-background.hover:bg-accent.hover:text-accent-foreground.h-9.px-3.rounded-xl See general content strategy
            %button#voxa-refine.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.bg-primary.h-10.px-4.bg-gradient-to-r.text-white.font-medium.py-2.rounded-xl{class: "[&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:bg-primary/90 from-[#A37FFF] to-[#3AC8FF] hover:from-[#3AC8FF] hover:to-[#A37FFF]", style: "display: none;"}
              %span#voxa-button-text Refine with Voxa
            %button#toggle-form.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.bg-primary.h-10.px-4.bg-gradient-to-r.text-black.font-medium.py-2.rounded-xl{class: "[&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:bg-primary/90 from-[#FFC940] to-[#FF6848] hover:from-[#FF6848] hover:to-[#A37FFF]"}
              %span#button-text Add Content

      #strategy-form.bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl.mb-6{style: "display: none;"}
        .p-6
        .flex.items-center.justify-between.mb-4
          %h3.text-lg.font-semibold üß† Generate New Content Strategy
          #form-status.text-sm.text-gray-500{style: "display: none;"}
        
        = form_with url: creas_strategist_index_path, method: :post, local: false, 
            id: "strategy-creation-form", class: "strategy-form" do |form|
          = form.hidden_field :month, value: @presenter.safe_month_for_js
          
          .grid.grid-cols-1.md:grid-cols-2.gap-4.mb-4
            .col-span-1.md:col-span-2
              = form.label "strategy_form[objective_of_the_month]", "Objective of the Month", 
                  class: "block text-sm font-medium mb-1 text-gray-700"
              = form.text_area "strategy_form[objective_of_the_month]", 
                  placeholder: "e.g., Increase brand awareness and engagement", 
                  rows: 3, class: "w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                  required: true
            
            .col-span-1
              = form.label "strategy_form[monthly_themes]", "Monthly Themes", 
                  class: "block text-sm font-medium mb-1 text-gray-700"
              = form.text_field "strategy_form[monthly_themes]", 
                  placeholder: "Brand awareness, Product showcase, Community engagement", 
                  class: "w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              %p.text-xs.text-gray-500.mt-1 Separate with commas
            
            .col-span-1
              = form.label "strategy_form[frequency_per_week]", "Frequency per Week", 
                  class: "block text-sm font-medium mb-1 text-gray-700"
              = form.number_field "strategy_form[frequency_per_week]", 
                  placeholder: "3", min: 1, max: 7, value: 3,
                  class: "w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                  required: true
          
          .mb-4
            %h3.block.text-sm.font-medium.mb-3.text-gray-700 Resources Override
            %p.text-xs.text-gray-500.mb-3 Configure additional resources and constraints for content creation
            
            .grid.grid-cols-1.md:grid-cols-2.gap-4.mb-3
              .col-span-1
                %label.block.text-sm.font-medium.mb-1.text-gray-600 Budget Range
                %select#budget-select.w-full.p-2.border.border-gray-300.rounded-md.focus:ring-2.focus:ring-blue-500.focus:border-blue-500
                  %option{value: ""} No specific budget
                  %option{value: "500"} Low budget ($500)
                  %option{value: "1000"} Medium budget ($1,000)
                  %option{value: "2500"} High budget ($2,500)
                  %option{value: "5000"} Premium budget ($5,000)
              
              .col-span-1
                %label.block.text-sm.font-medium.mb-1.text-gray-600 Team Size
                %select#team-size-select.w-full.p-2.border.border-gray-300.rounded-md.focus:ring-2.focus:ring-blue-500.focus:border-blue-500
                  %option{value: ""} No specific team size
                  %option{value: "1"} Solo creator (1 person)
                  %option{value: "2"} Small team (2 people)
                  %option{value: "3"} Medium team (3 people)
                  %option{value: "5"} Large team (5+ people)
            
            .grid.grid-cols-1.md:grid-cols-2.gap-4.mb-3
              .col-span-1
                %label.block.text-sm.font-medium.mb-1.text-gray-600 Design Tools
                %select#tools-select.w-full.p-2.border.border-gray-300.rounded-md.focus:ring-2.focus:ring-blue-500.focus:border-blue-500{multiple: true, size: "3"}
                  %option{value: "Canva"} Canva
                  %option{value: "Photoshop"} Adobe Photoshop
                  %option{value: "Figma"} Figma
                  %option{value: "Sketch"} Sketch
                  %option{value: "After Effects"} After Effects
                  %option{value: "Premiere Pro"} Premiere Pro
                  %option{value: "Final Cut"} Final Cut Pro
                %p.text-xs.text-gray-500.mt-1 Hold Ctrl/Cmd to select multiple tools
              
              .col-span-1
                %label.block.text-sm.font-medium.mb-1.text-gray-600 Content Resources
                .space-y-2
                  %label.flex.items-center
                    %input#ai-avatars-checkbox.mr-2{type: "checkbox"}
                    %span.text-sm Use AI avatars
                  %label.flex.items-center
                    %input#stock-photos-checkbox.mr-2{type: "checkbox"}
                    %span.text-sm Use stock photos
                  %label.flex.items-center
                    %input#custom-graphics-checkbox.mr-2{type: "checkbox"}
                    %span.text-sm Create custom graphics
            
            = form.hidden_field "strategy_form[resources_override]", id: "resources-override-json"
          
          .flex.justify-between.items-center
            %button#cancel-form.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.text-sm.font-medium.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.border.border-input.bg-background.hover:bg-accent.hover:text-accent-foreground.h-9.px-3.rounded-xl{type: "button"} 
              Cancel
            %button#submit-strategy.inline-flex.items-center.justify-center.gap-2.whitespace-nowrap.ring-offset-background.transition-colors.focus-visible:outline-none.focus-visible:ring-2.focus-visible:ring-ring.focus-visible:ring-offset-2.disabled:pointer-events-none.disabled:opacity-50.bg-primary.h-10.px-4.bg-gradient-to-r.text-black.font-medium.py-2.rounded-xl.disabled:bg-gray-400{class: "[&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:bg-primary/90 from-[#FFC940] to-[#FF6848] hover:from-[#FF6848] hover:to-[#A37FFF]", type: "submit"}
              %span.submit-text Generate Strategy
              %span.loading-spinner{style: "display: none;"} 
                %svg.animate-spin.w-4.h-4.inline.mr-2{fill: "none", viewBox: "0 0 24 24"}
                  %circle.opacity-25{cx: "12", cy: "12", r: "10", stroke: "currentColor", "stroke-width": "4"}
                  %path.opacity-75{fill: "currentColor", d: "m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"}
                Generating...

      #strategy-result.bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl.p-6.mb-6{style: "display: none;"}
      .flex.items-start.justify-between.mb-4
        .flex.items-center.gap-2
          %svg.w-5.h-5.text-green-600{fill: "currentColor", viewBox: "0 0 20 20"}
            %path{"fill-rule": "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z", "clip-rule": "evenodd"}
          %h3.text-lg.font-semibold.text-green-800 Strategy Generated Successfully!
        %button.text-gray-400.hover:text-gray-600.text-xl.font-bold{onclick: "hideStrategyOverview()"} &times;
      
      #strategy-content.space-y-4
        .grid.grid-cols-1.md:grid-cols-3.gap-4.text-sm
          .bg-white.p-3.rounded.border
            %h4.font-medium.text-gray-900.mb-1 Strategy Name
            %p#strategy-name.text-gray-600 -
          .bg-white.p-3.rounded.border
            %h4.font-medium.text-gray-900.mb-1 Posts per Week
            %p#strategy-frequency.text-gray-600 -
          .bg-white.p-3.rounded.border
            %h4.font-medium.text-gray-900.mb-1 Total Posts
            %p#strategy-total.text-gray-600 -
        
        .bg-white.p-4.rounded.border
          %h4.font-medium.text-gray-900.mb-2 Monthly Objective
          %p#strategy-objective.text-gray-600 -
        
        .bg-white.p-4.rounded.border
          %h4.font-medium.text-gray-900.mb-2 Content Themes
          #strategy-themes.text-gray-600 -

      #error-message.bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl.p-4.mb-6{style: "display: none;"}
      .flex.items-center.gap-2.text-red-800
        %svg.w-5.h-5{fill: "currentColor", viewBox: "0 0 20 20"}
          %path{"fill-rule": "evenodd", d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z", "clip-rule": "evenodd"}
        %span#error-text Error generating strategy

      .space-y-6
        - %w[Week1 Week2 Week3 Week4].each_with_index do |week, week_index|
          .bg-card.text-card-foreground.border-0.shadow-lg.rounded-2xl
            .flex.items-center.justify-between.p-4.border-b
              %h3.font-semibold.text-gray-900= week
              .flex.items-center.gap-2
                %span.text-sm Goal:
                %select.p-1.border.rounded.text-sm
                  %option Awareness
                  %option Engagement
                  %option Conversion
            
            .p-4
            .grid.grid-cols-7.gap-4
              - %w[Mon Tue Wed Thu Fri Sat Sun].each do |day|
                .text-center
                  %h4.text-sm.font-medium.mb-2= day
                  .bg-gray-50.rounded.p-3.week-content-slot{style: "min-height: 120px;"}
                    %button.w-full.h-8.border-2.border-dashed.border-gray-300.rounded.text-gray-400.hover:border-gray-400.hover:text-gray-600
                      +
          
          .week-details.bg-gray-50.p-4.rounded.mt-4{style: "display: none;", id: "week-details-#{week_index}"}
            .text-lg.font-semibold.mb-3.text-gray-700 üìã Week #{week_index + 1} - Content Details
            .content-details-grid.grid.grid-cols-1.gap-3

:javascript
  document.addEventListener('turbo:load', function() {
    // Initialize page variables
    window.currentMonth = '#{@presenter.safe_month_for_js}';
    window.currentPlan = #{@presenter.current_plan_json};
    const toggleBtn = document.getElementById('toggle-form');
    const overviewBtn = document.getElementById('toggle-overview');
    const voxaBtn = document.getElementById('voxa-refine');
    const form = document.getElementById('strategy-form');
    const resultDiv = document.getElementById('strategy-result');
    const cancelBtn = document.getElementById('cancel-form');
    const strategyForm = document.getElementById('strategy-creation-form');
    const submitBtn = document.getElementById('submit-strategy');
    const errorDiv = document.getElementById('error-message');
    
    // Form toggle button
    if (toggleBtn && form) {
      toggleBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const isFormVisible = form.style.display !== 'none';
        form.style.display = isFormVisible ? 'none' : 'block';
        if (resultDiv) resultDiv.style.display = 'none';
        hideMessages();
      });
    }
    
    // Overview toggle button - same behavior as form toggle
    if (overviewBtn && resultDiv) {
      overviewBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const isResultVisible = resultDiv.style.display !== 'none';
        
        if (isResultVisible) {
          // Hide if currently visible
          resultDiv.style.display = 'none';
        } else {
          // Show with appropriate content
          if (window.currentPlan) {
            showStrategyOverview();
          } else {
            showBrandOverview();
          }
        }
        
        // Hide form and error messages (but not result div - we're managing that)
        if (form) form.style.display = 'none';
        hideErrorMessage();
      });
    }
    
    // Cancel button
    if (cancelBtn && form) {
      cancelBtn.addEventListener('click', function(e) {
        e.preventDefault();
        form.style.display = 'none';
        resetForm();
      });
    }

    // Form submission
    if (strategyForm && submitBtn) {
      strategyForm.addEventListener('submit', handleFormSubmit);
    }

    // Voxa refine button
    if (voxaBtn) {
      voxaBtn.addEventListener('click', handleVoxaRefine);
    }

    // Resources Override form handling
    setupResourcesOverrideHandlers();

    // Initialize with existing plan if available
    if (window.currentPlan) {
      displayStrategyResult(window.currentPlan);
      populateCalendarWithStrategy(window.currentPlan);
      updateButtonText();
      updateOverviewButton();
      updateVoxaButton();
      // Keep overview hidden by default - user clicks to show, just like content details
      if (resultDiv) resultDiv.style.display = 'none';
    } else {
      // Hide overview button when no plan
      updateOverviewButton();
      updateVoxaButton();
    }
    
    // Also check for plan_id parameter for direct access
    const urlParams = new URLSearchParams(window.location.search);
    const planId = urlParams.get('plan_id');
    if (planId && (!window.currentPlan || window.currentPlan.id != planId)) {
      loadStrategyPlan(planId);
    }
  });

  function handleFormSubmit(e) {
    e.preventDefault();
    
    const form = e.target;
    const submitBtn = document.getElementById('submit-strategy');
    const submitText = submitBtn.querySelector('.submit-text');
    const loadingSpinner = submitBtn.querySelector('.loading-spinner');
    
    // Show loading state
    setLoadingState(true, submitBtn, submitText, loadingSpinner);
    hideMessages();
    
    const formData = new FormData(form);
    
    // Create AbortController for timeout handling
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 second timeout
    
    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      signal: controller.signal
    })
    .then(response => {
      clearTimeout(timeoutId);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      setLoadingState(false, submitBtn, submitText, loadingSpinner);
      
      if (data.success) {
        window.currentPlan = data.plan;
        displayStrategyResult(data.plan, true); // Show result after form submission
        populateCalendarWithStrategy(data.plan);
        document.getElementById('strategy-form').style.display = 'none';
        resetForm();
        updateButtonText();
        updateOverviewButton();
        updateVoxaButton();
        
        // Update URL with plan_id without page reload
        if (data.plan && data.plan.id) {
          const newUrl = new URL(window.location);
          newUrl.searchParams.set('plan_id', data.plan.id);
          window.history.pushState({}, '', newUrl);
        }
      } else {
        showError(data.error || 'Failed to generate strategy');
      }
    })
    .catch(error => {
      clearTimeout(timeoutId);
      setLoadingState(false, submitBtn, submitText, loadingSpinner);
      
      if (error.name === 'AbortError') {
        // Strategy might still be generating, check for it
        showError('Generation is taking longer than expected. Checking for completed strategy...');
        setTimeout(() => checkExistingStrategy(currentMonth), 5000);
      } else {
        showError('Network error occurred. Please try again.');
        console.error('Error:', error);
      }
    });
  }

  function setLoadingState(loading, submitBtn, submitText, loadingSpinner) {
    if (loading) {
      submitBtn.disabled = true;
      submitText.style.display = 'none';
      loadingSpinner.style.display = 'inline-flex';
    } else {
      submitBtn.disabled = false;
      submitText.style.display = 'inline';
      loadingSpinner.style.display = 'none';
    }
  }

  function displayStrategyResult(plan, shouldShow = false) {
    const resultDiv = document.getElementById('strategy-result');
    if (!resultDiv || !plan) return;
    
    // Restore original title when showing strategy
    const titleEl = resultDiv.querySelector('h3');
    if (titleEl) {
      titleEl.innerHTML = '<svg class="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>Strategy Generated Successfully!';
      titleEl.className = 'text-lg font-semibold text-green-800';
    }
    
    // Update result content
    document.getElementById('strategy-name').textContent = plan.strategy_name || '-';
    document.getElementById('strategy-frequency').textContent = plan.frequency_per_week || '-';
    document.getElementById('strategy-total').textContent = 
      plan.frequency_per_week ? (plan.frequency_per_week * 4) + ' posts' : '-';
    document.getElementById('strategy-objective').textContent = plan.objective_of_the_month || '-';
    
    // Update themes - extract from content_distribution or use monthly_themes
    const themesEl = document.getElementById('strategy-themes');
    let themes = [];
    
    // Try to get themes from monthly_themes first
    if (plan.monthly_themes && plan.monthly_themes.length > 0) {
      themes = plan.monthly_themes;
    } 
    // If empty, extract themes from content_distribution
    else if (plan.content_distribution) {
      themes = Object.keys(plan.content_distribution).map(key => {
        const dist = plan.content_distribution[key];
        return dist.goal || key; // Use goal or the key itself as theme
      });
    }
    
    if (themes.length > 0) {
      themesEl.innerHTML = themes.map(theme => 
        `<span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded mr-2 mb-1">${theme}</span>`
      ).join('');
    } else {
      themesEl.textContent = '-';
    }
    
    // Only show if explicitly requested (like after form submission)
    if (shouldShow) {
      resultDiv.style.display = 'block';
      resultDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
    
    // Setup close button
    const closeBtn = document.getElementById('close-result');
    if (closeBtn) {
      closeBtn.onclick = function() {
        resultDiv.style.display = 'none';
      };
    }
  }

  function showError(message) {
    const errorDiv = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');
    
    if (errorDiv && errorText) {
      errorText.textContent = message;
      errorDiv.style.display = 'block';
      errorDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }

  function hideMessages() {
    const resultDiv = document.getElementById('strategy-result');
    const errorDiv = document.getElementById('error-message');
    
    if (resultDiv) resultDiv.style.display = 'none';
    if (errorDiv) errorDiv.style.display = 'none';
  }

  function hideErrorMessage() {
    const errorDiv = document.getElementById('error-message');
    if (errorDiv) errorDiv.style.display = 'none';
  }

  function resetForm() {
    const form = document.getElementById('strategy-creation-form');
    if (form) {
      // Reset all form fields except hidden month field
      const inputs = form.querySelectorAll('input:not([type="hidden"]), textarea, select');
      inputs.forEach(input => {
        if (input.type === 'number') {
          input.value = input.getAttribute('value') || '';
        } else {
          input.value = '';
        }
      });
    }
  }

  function loadStrategyPlan(planId) {
    fetch(`/creas_strategy_plans/${planId}`)
      .then(response => response.json())
      .then(plan => {
        console.log('Strategy plan loaded:', plan);
        window.currentPlan = plan;
        displayStrategyResult(plan, false); // Just populate content, don't show
        populateCalendarWithStrategy(plan);
        updateButtonText();
        updateOverviewButton();
        updateVoxaButton();
      })
      .catch(error => {
        console.error('Error loading strategy:', error);
        showError('Failed to load strategy plan');
      });
  }

  function checkExistingStrategy(month) {
    fetch(`/planning/strategy_for_month?month=${month}`)
      .then(response => {
        if (response.ok) {
          return response.json();
        }
        throw new Error('No strategy found');
      })
      .then(plan => {
        if (plan && plan.id) {
          window.currentPlan = plan;
          displayStrategyResult(plan, false); // Just populate content, don't show
          populateCalendarWithStrategy(plan);
          updateButtonText();
          updateVoxaButton();
          
          // Update URL with plan_id
          const newUrl = new URL(window.location);
          newUrl.searchParams.set('plan_id', plan.id);
          window.history.pushState({}, '', newUrl);
        }
      })
      .catch(error => {
        console.log('No existing strategy found for month:', month);
        // Keep form closed by default but ready to use
        document.getElementById('strategy-form').style.display = 'none';
      });
  }

  function updateButtonText() {
    const buttonText = document.getElementById('button-text');
    if (buttonText && window.currentPlan) {
      buttonText.textContent = 'Add New Content';
    } else if (buttonText) {
      buttonText.textContent = 'Add Content';
    }
  }

  function updateOverviewButton() {
    const overviewBtn = document.getElementById('toggle-overview');
    // Always show the overview button if we have a brand
    if (overviewBtn) {
      overviewBtn.style.display = 'inline-block';
      overviewBtn.style.opacity = '1';
      // Update button text based on whether we have a strategy or not
      if (window.currentPlan) {
        overviewBtn.textContent = 'See content strategy';
      } else {
        overviewBtn.textContent = 'See brand overview';
      }
    }
  }

  function populateCalendarWithStrategy(plan) {
    if (!plan || !plan.weekly_plan) return;
    
    // Clear existing content first
    const allContentSlots = document.querySelectorAll('.week-content-slot');
    allContentSlots.forEach(slot => {
      slot.innerHTML = '<button class="w-full h-8 border-2 border-dashed border-gray-300 rounded text-gray-400 hover:border-gray-400 hover:text-gray-600">+</button>';
    });
    
    // Debug: log the weekly plan structure
    console.log('Weekly plan structure:', plan.weekly_plan);
    
    // Populate with new content from weekly_plan structure
    const weeklyPlan = plan.weekly_plan || [];
    weeklyPlan.forEach((week, weekIndex) => {
      console.log(`Processing week ${weekIndex + 1}:`, week);
      
      // Handle different possible structures in weekly_plan
      // Look for content in various possible fields
      let contentPieces = [];
      
      if (week.content_pieces) {
        contentPieces = week.content_pieces;
      } else if (week.posts) {
        contentPieces = week.posts;
      } else if (week.ideas) {
        contentPieces = week.ideas;
      } else if (Array.isArray(week)) {
        contentPieces = week;
      }
      
      console.log(`Found ${contentPieces.length} content pieces for week ${weekIndex + 1}`);
      
      contentPieces.forEach((piece, pieceIndex) => {
        console.log(`Processing piece ${pieceIndex}:`, piece);
        addContentToCalendar(weekIndex, pieceIndex % 7, piece); // Distribute across days
      });
    });
  }

  function getDayIndex(dayName) {
    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    return days.indexOf(dayName);
  }

  function getDayIndexFromPiece(piece) {
    // Handle different day formats that might come from the API
    let dayName = piece.day || piece.scheduled_day || piece.publish_day;
    
    if (!dayName) {
      // If no day specified, try to extract from other fields
      return -1;
    }
    
    // Handle different day formats
    if (typeof dayName === 'string') {
      // Convert "Mon", "Tue" etc to full names
      const shortToFull = {
        'Mon': 'Monday', 'Tue': 'Tuesday', 'Wed': 'Wednesday', 'Thu': 'Thursday',
        'Fri': 'Friday', 'Sat': 'Saturday', 'Sun': 'Sunday'
      };
      
      dayName = shortToFull[dayName] || dayName;
    }
    
    return getDayIndex(dayName);
  }

  function addContentToCalendar(weekIndex, dayIndex, contentPiece) {
    const weekElements = document.querySelectorAll('.bg-white.rounded-lg.shadow');
    // Count correctly: skip form and result sections, find actual week containers
    let actualWeekIndex = 0;
    let weekElement = null;
    
    for (let i = 0; i < weekElements.length; i++) {
      const element = weekElements[i];
      // Look for elements that contain week content (have the week structure)
      if (element.querySelector('.week-content-slot')) {
        if (actualWeekIndex === weekIndex) {
          weekElement = element;
          break;
        }
        actualWeekIndex++;
      }
    }
    
    if (!weekElement) {
      console.log(`Week element not found for weekIndex: ${weekIndex}`);
      return;
    }
    
    const dayElements = weekElement.querySelectorAll('.week-content-slot');
    const dayElement = dayElements[dayIndex];
    
    if (!dayElement) {
      console.log(`Day element not found for dayIndex: ${dayIndex}`);
      return;
    }
    
    // Extract content information from the piece
    const platform = contentPiece.platform || 'Instagram';
    const contentType = contentPiece.type || contentPiece.title || 'Post';
    const title = contentPiece.title || contentPiece.hook || contentPiece.cta || 'Draft';
    const icon = getContentIcon(platform, contentType);
    
    console.log(`Adding content to week ${weekIndex + 1}, day ${dayIndex + 1}:`, {
      platform, 
      contentType, 
      title: title.substring(0, 30) + '...'
    });
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'bg-blue-500 text-white text-xs p-2 rounded mb-2 cursor-pointer hover:bg-blue-600 transition-colors';
    contentDiv.innerHTML = `${icon} ${title.length > 20 ? title.substring(0, 20) + '...' : title}`;
    contentDiv.title = title; // Full title on hover
    contentDiv.onclick = () => showContentDetails(weekIndex, contentPiece);
    
    // Insert before the + button
    const addButton = dayElement.querySelector('button');
    if (addButton) {
      dayElement.insertBefore(contentDiv, addButton);
    } else {
      dayElement.appendChild(contentDiv);
    }
  }

  function getContentIcon(platform, contentType) {
    // Default to Instagram Reel icon as mentioned all content is reels for now
    const platformIcons = {
      'Instagram': 'üì∏',
      'TikTok': 'üéµ', 
      'YouTube': 'üé•',
      'Facebook': 'üë•',
      'Twitter': 'üê¶',
      'LinkedIn': 'üíº'
    };
    
    // Content type icons
    const typeIcons = {
      'Reel': 'üé¨',
      'Post': 'üì∏',
      'Story': 'üì±',
      'Carousel': 'üñºÔ∏è',
      'Video': 'üé•'
    };
    
    // Since you mentioned all are reels for now, use the reel icon
    if (contentType && typeIcons[contentType]) {
      return typeIcons[contentType];
    }
    
    // Otherwise, use platform specific icon or default to reel
    return platformIcons[platform] || 'üé¨';
  }

  function showContentDetails(weekIndex, contentPiece) {
    const weekDetailsId = `week-details-${weekIndex}`;
    let weekDetails = document.getElementById(weekDetailsId);
    
    // If week details section doesn't exist, create it
    if (!weekDetails) {
      const weekElements = document.querySelectorAll('.bg-white.rounded-lg.shadow');
      // Find the correct week element (same logic as addContentToCalendar)
      let actualWeekIndex = 0;
      let weekElement = null;
      
      for (let i = 0; i < weekElements.length; i++) {
        const element = weekElements[i];
        if (element.querySelector('.week-content-slot')) {
          if (actualWeekIndex === weekIndex) {
            weekElement = element;
            break;
          }
          actualWeekIndex++;
        }
      }
      
      if (!weekElement) return;
      
      weekDetails = document.createElement('div');
      weekDetails.id = weekDetailsId;
      weekDetails.className = 'week-details bg-gray-50 p-4 rounded mt-4';
      weekDetails.style.display = 'none';
      weekDetails.innerHTML = `
        <div class="flex justify-between items-center mb-3">
          <div class="text-lg font-semibold text-gray-700">üìã Week ${weekIndex + 1} - Content Details</div>
          <button onclick="hideContentDetails('${weekDetailsId}')" class="text-gray-500 hover:text-gray-700 text-xl">&times;</button>
        </div>
        <div class="content-details-grid grid grid-cols-1 gap-3"></div>
      `;
      
      weekElement.appendChild(weekDetails);
    }
    
    // Add or update content in the details section
    const detailsGrid = weekDetails.querySelector('.content-details-grid');
    const contentId = `content-${weekIndex}-${Date.now()}`;
    
    const title = contentPiece.title || 'Content Draft';
    const platform = contentPiece.platform || 'Instagram';
    const type = contentPiece.type || 'Post';
    
    const contentDetailHTML = `
      <div id="${contentId}" class="bg-white p-4 rounded border-l-4 border-blue-500 shadow-sm">
        <div class="flex justify-between items-start mb-3">
          <h4 class="text-lg font-semibold text-gray-900">${title}</h4>
          <div class="flex items-center gap-2">
            <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">${platform} ${type}</span>
            <button onclick="removeContentDetail('${contentId}')" class="text-gray-400 hover:text-gray-600 text-lg font-bold">&times;</button>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="space-y-3">
            ${contentPiece.hook ? `
              <div class="bg-blue-50 p-3 rounded">
                <h5 class="font-medium text-gray-900 mb-1">Hook</h5>
                <p class="text-sm text-gray-700">${contentPiece.hook}</p>
              </div>
            ` : ''}
            
            ${contentPiece.cta ? `
              <div class="bg-green-50 p-3 rounded">
                <h5 class="font-medium text-gray-900 mb-1">Call to Action</h5>
                <p class="text-sm text-gray-700">${contentPiece.cta}</p>
              </div>
            ` : ''}
          </div>
          
          <div class="space-y-3">
            ${contentPiece.description ? `
              <div class="bg-yellow-50 p-3 rounded">
                <h5 class="font-medium text-gray-900 mb-1">Description</h5>
                <p class="text-sm text-gray-700">${contentPiece.description}</p>
              </div>
            ` : ''}
            
            ${contentPiece.visual_notes ? `
              <div class="bg-purple-50 p-3 rounded">
                <h5 class="font-medium text-gray-900 mb-1">Visual Notes</h5>
                <p class="text-sm text-gray-700">${contentPiece.visual_notes}</p>
              </div>
            ` : ''}
            
            ${contentPiece.pillar ? `
              <div class="bg-indigo-50 p-3 rounded">
                <h5 class="font-medium text-gray-900 mb-1">Content Pillar</h5>
                <p class="text-sm text-gray-700">${contentPiece.pillar}</p>
              </div>
            ` : ''}
          </div>
        </div>
      </div>
    `;
    
    detailsGrid.insertAdjacentHTML('beforeend', contentDetailHTML);
    weekDetails.style.display = 'block';
    
    // Smooth scroll to the details section
    weekDetails.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }

  function hideContentDetails(weekDetailsId) {
    const weekDetails = document.getElementById(weekDetailsId);
    if (weekDetails) {
      weekDetails.style.display = 'none';
      // Clear the content details
      const detailsGrid = weekDetails.querySelector('.content-details-grid');
      if (detailsGrid) {
        detailsGrid.innerHTML = '';
      }
    }
  }

  function removeContentDetail(contentId) {
    const contentDetail = document.getElementById(contentId);
    if (contentDetail) {
      contentDetail.remove();
      
      // If this was the last content detail in the section, hide the whole section
      const parentGrid = contentDetail.parentElement;
      if (parentGrid && parentGrid.children.length === 0) {
        const weekDetails = parentGrid.closest('.week-details');
        if (weekDetails) {
          weekDetails.style.display = 'none';
        }
      }
    }
  }

  function showStrategyOverview() {
    const resultDiv = document.getElementById('strategy-result');
    if (resultDiv && window.currentPlan) {
      resultDiv.style.display = 'block';
      resultDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }

  function showBrandOverview() {
    const resultDiv = document.getElementById('strategy-result');
    if (resultDiv) {
      // Update the title and content for brand overview
      const titleEl = resultDiv.querySelector('h3');
      if (titleEl) {
        titleEl.innerHTML = '<svg class="w-5 h-5 text-blue-600" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 2a2 2 0 00-2 2v11a2 2 0 002 2h12a2 2 0 002-2V4a2 2 0 00-2-2H4zm3 2h6v2H7V4zm8 6a1 1 0 100-2 1 1 0 000 2zm-8-1a1 1 0 11-2 0 1 1 0 012 0zm0 4a1 1 0 11-2 0 1 1 0 012 0zm3 1h4v-2H8v2z" clip-rule="evenodd"></svg>Brand Overview - Ready to create content strategy!';
        titleEl.className = 'text-lg font-semibold text-blue-800';
      }
      
      // Update strategy content with brand info placeholder
      document.getElementById('strategy-name').textContent = 'No strategy created yet';
      document.getElementById('strategy-frequency').textContent = 'Click "Add Content" to get started';
      document.getElementById('strategy-total').textContent = '-';
      document.getElementById('strategy-objective').textContent = 'Create your first content strategy to see objectives and themes here.';
      
      const themesEl = document.getElementById('strategy-themes');
      themesEl.innerHTML = '<span class="text-gray-500 italic">Themes will appear when you generate a strategy</span>';
      
      resultDiv.style.display = 'block';
      resultDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }

  function hideStrategyOverview() {
    const resultDiv = document.getElementById('strategy-result');
    if (resultDiv) {
      resultDiv.style.display = 'none';
    }
  }

  function setupResourcesOverrideHandlers() {
    const budgetSelect = document.getElementById('budget-select');
    const teamSizeSelect = document.getElementById('team-size-select');
    const toolsSelect = document.getElementById('tools-select');
    const aiAvatarsCheckbox = document.getElementById('ai-avatars-checkbox');
    const stockPhotosCheckbox = document.getElementById('stock-photos-checkbox');
    const customGraphicsCheckbox = document.getElementById('custom-graphics-checkbox');
    const hiddenInput = document.getElementById('resources-override-json');

    const elements = [budgetSelect, teamSizeSelect, toolsSelect, aiAvatarsCheckbox, stockPhotosCheckbox, customGraphicsCheckbox];
    
    elements.forEach(element => {
      if (element) {
        const eventType = element.type === 'checkbox' ? 'change' : 'change';
        element.addEventListener(eventType, updateResourcesOverrideJSON);
      }
    });

    // Initialize with empty JSON
    if (hiddenInput) {
      hiddenInput.value = '{}';
    }
  }

  function updateResourcesOverrideJSON() {
    const budgetSelect = document.getElementById('budget-select');
    const teamSizeSelect = document.getElementById('team-size-select');
    const toolsSelect = document.getElementById('tools-select');
    const aiAvatarsCheckbox = document.getElementById('ai-avatars-checkbox');
    const stockPhotosCheckbox = document.getElementById('stock-photos-checkbox');
    const customGraphicsCheckbox = document.getElementById('custom-graphics-checkbox');
    const hiddenInput = document.getElementById('resources-override-json');

    if (!hiddenInput) return;

    const resourcesData = {};

    // Budget
    if (budgetSelect && budgetSelect.value) {
      resourcesData.budget = parseInt(budgetSelect.value, 10);
    }

    // Team Size
    if (teamSizeSelect && teamSizeSelect.value) {
      resourcesData.team_size = parseInt(teamSizeSelect.value, 10);
    }

    // Tools (multiple select)
    if (toolsSelect) {
      const selectedTools = Array.from(toolsSelect.selectedOptions).map(option => option.value);
      if (selectedTools.length > 0) {
        resourcesData.tools = selectedTools;
      }
    }

    // Content Resources
    if (aiAvatarsCheckbox && aiAvatarsCheckbox.checked) {
      resourcesData.ai_avatars = true;
    }
    if (stockPhotosCheckbox && stockPhotosCheckbox.checked) {
      resourcesData.stock = true;
    }
    if (customGraphicsCheckbox && customGraphicsCheckbox.checked) {
      resourcesData.custom_graphics = true;
    }

    // Update hidden field with JSON
    hiddenInput.value = JSON.stringify(resourcesData);
  }

  function updateVoxaButton() {
    const voxaBtn = document.getElementById('voxa-refine');
    if (voxaBtn) {
      if (window.currentPlan && window.currentPlan.id) {
        voxaBtn.style.display = 'inline-block';
      } else {
        voxaBtn.style.display = 'none';
      }
    }
  }

  function handleVoxaRefine(e) {
    e.preventDefault();
    
    if (!window.currentPlan || !window.currentPlan.id) {
      showError('No strategy plan found to refine');
      return;
    }

    const voxaBtn = document.getElementById('voxa-refine');
    const voxaButtonText = document.getElementById('voxa-button-text');
    
    // Show loading state
    if (voxaBtn) voxaBtn.disabled = true;
    if (voxaButtonText) voxaButtonText.textContent = 'Refining...';
    
    hideMessages();
    
    // Create form and submit
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/planning/voxa_refine';
    
    // Add CSRF token
    const csrfToken = document.querySelector('meta[name="csrf-token"]');
    if (csrfToken) {
      const csrfInput = document.createElement('input');
      csrfInput.type = 'hidden';
      csrfInput.name = 'authenticity_token';
      csrfInput.value = csrfToken.getAttribute('content');
      form.appendChild(csrfInput);
    }
    
    // Add plan_id
    const planIdInput = document.createElement('input');
    planIdInput.type = 'hidden';
    planIdInput.name = 'plan_id';
    planIdInput.value = window.currentPlan.id;
    form.appendChild(planIdInput);
    
    // Submit form
    document.body.appendChild(form);
    form.submit();
  }